// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Person.pb.h"
// @@protoc_insertion_point(imports)

@implementation PersonRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PersonRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Person ()
@property (strong) PBAppendableArray * myfieldArray;
@end

@implementation Person

@synthesize myfieldArray;
@dynamic myfield;
- (void) dealloc {
  self.myfieldArray = nil;
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Person* defaultPersonInstance = nil;
+ (void) initialize {
  if (self == [Person class]) {
    defaultPersonInstance = [[Person alloc] init];
  }
}
+ (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (PBArray *)myfield {
  return myfieldArray;
}
- (unsigned long)myfieldAtIndex:(NSUInteger)index {
  return [myfieldArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger myfieldArrayCount = self.myfieldArray.count;
  if (myfieldArrayCount > 0) {
    const unsigned long *values = (const unsigned long *)self.myfieldArray.data;
    for (NSUInteger i = 0; i < myfieldArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (long) serializedSize {
  long size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    NSInteger dataSize = 0;
    const NSUInteger count = self.myfieldArray.count;
    const unsigned long *values = (const unsigned long *)self.myfieldArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Person*) parseFromData:(NSData*) data {
  return (Person*)[[[Person builder] mergeFromData:data] build];
}
+ (Person*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input {
  return (Person*)[[[Person builder] mergeFromInputStream:input] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PersonBuilder*) builder {
  return [[PersonBuilder alloc] init];
}
+ (PersonBuilder*) builderWithPrototype:(Person*) prototype {
  return [[Person builder] mergeFrom:prototype];
}
- (PersonBuilder*) builder {
  return [Person builder];
}
- (PersonBuilder*) toBuilder {
  return [Person builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (NSNumber* value in self.myfieldArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myfield", @((unsigned long)value)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Person class]]) {
    return NO;
  }
  Person *otherMessage = other;
  return
      [self.myfieldArray isEqualToArray:otherMessage.myfieldArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (NSNumber* value in self.myfieldArray) {
    hashCode = hashCode * 31 + [value longValue];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PersonBuilder()
@property (strong) Person* result;
@end

@implementation PersonBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[Person alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PersonBuilder*) clear {
  self.result = [[Person alloc] init];
  return self;
}
- (PersonBuilder*) clone {
  return [Person builderWithPrototype:result];
}
- (Person*) defaultInstance {
  return [Person defaultInstance];
}
- (Person*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Person*) buildPartial {
  Person* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PersonBuilder*) mergeFrom:(Person*) other {
  if (other == [Person defaultInstance]) {
    return self;
  }
  if (other.myfieldArray.count > 0) {
    if (result.myfieldArray == nil) {
      result.myfieldArray = [other.myfieldArray copy];
    } else {
      [result.myfieldArray appendArray:other.myfieldArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PersonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PersonBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    NSInteger tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addMyfield:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)myfield {
  return result.myfieldArray;
}
- (unsigned long)myfieldAtIndex:(NSUInteger)index {
  return [result myfieldAtIndex:index];
}
- (PersonBuilder *)addMyfield:(unsigned long)value {
  if (result.myfieldArray == nil) {
    result.myfieldArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [result.myfieldArray addUint32:value];
  return self;
}
- (PersonBuilder *)setMyfieldArray:(NSArray *)array {
  result.myfieldArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PersonBuilder *)setMyfieldValues:(const unsigned long *)values count:(NSUInteger)count {
  result.myfieldArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PersonBuilder *)clearMyfield {
  result.myfieldArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
