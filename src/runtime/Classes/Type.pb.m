// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Type.pb.h"
// @@protoc_insertion_point(imports)

@implementation TypeRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TypeRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [AnyRoot registerAllExtensions:registry];
    [SourceContextRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SyntaxIsValidValue(Syntax value) {
  switch (value) {
    case SyntaxSyntaxProto2:
    case SyntaxSyntaxProto3:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSyntax(Syntax value) {
  switch (value) {
    case SyntaxSyntaxProto2:
      return @"SyntaxSyntaxProto2";
    case SyntaxSyntaxProto3:
      return @"SyntaxSyntaxProto3";
    default:
      return nil;
  }
}

@interface Type ()
@property (strong) NSString* name;
@property (strong) NSMutableArray<Field*> * fieldsArray;
@property (strong) NSMutableArray * oneofsArray;
@property (strong) NSMutableArray<Option*> * optionsArray;
@property (strong) SourceContext* sourceContext;
@property Syntax syntax;
@end

@implementation Type

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize fieldsArray;
@dynamic fields;
@synthesize oneofsArray;
@dynamic oneofs;
@synthesize optionsArray;
@dynamic options;
- (BOOL) hasSourceContext {
  return !!hasSourceContext_;
}
- (void) setHasSourceContext:(BOOL) _value_ {
  hasSourceContext_ = !!_value_;
}
@synthesize sourceContext;
- (BOOL) hasSyntax {
  return !!hasSyntax_;
}
- (void) setHasSyntax:(BOOL) _value_ {
  hasSyntax_ = !!_value_;
}
@synthesize syntax;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.sourceContext = [SourceContext defaultInstance];
    self.syntax = SyntaxSyntaxProto2;
  }
  return self;
}
static Type* defaultTypeInstance = nil;
+ (void) initialize {
  if (self == [Type class]) {
    defaultTypeInstance = [[Type alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTypeInstance;
}
- (instancetype) defaultInstance {
  return defaultTypeInstance;
}
- (NSArray<Field*> *)fields {
  return fieldsArray;
}
- (Field*)fieldsAtIndex:(NSUInteger)index {
  return [fieldsArray objectAtIndex:index];
}
- (NSArray *)oneofs {
  return oneofsArray;
}
- (NSString*)oneofsAtIndex:(NSUInteger)index {
  return [oneofsArray objectAtIndex:index];
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self.fieldsArray enumerateObjectsUsingBlock:^(Field *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.oneofsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:3 value:element];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasSourceContext) {
    [output writeMessage:5 value:self.sourceContext];
  }
  if (self.hasSyntax) {
    [output writeEnum:6 value:self.syntax];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  [self.fieldsArray enumerateObjectsUsingBlock:^(Field *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.oneofsArray.count;
    [self.oneofsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasSourceContext) {
    size_ += computeMessageSize(5, self.sourceContext);
  }
  if (self.hasSyntax) {
    size_ += computeEnumSize(6, self.syntax);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Type*) parseFromData:(NSData*) data {
  return (Type*)[[[Type builder] mergeFromData:data] build];
}
+ (Type*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Type*)[[[Type builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Type*) parseFromInputStream:(NSInputStream*) input {
  return (Type*)[[[Type builder] mergeFromInputStream:input] build];
}
+ (Type*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Type*)[[[Type builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Type*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Type*)[[[Type builder] mergeFromCodedInputStream:input] build];
}
+ (Type*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Type*)[[[Type builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TypeBuilder*) builder {
  return [[TypeBuilder alloc] init];
}
+ (TypeBuilder*) builderWithPrototype:(Type*) prototype {
  return [[Type builder] mergeFrom:prototype];
}
- (TypeBuilder*) builder {
  return [Type builder];
}
- (TypeBuilder*) toBuilder {
  return [Type builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.fieldsArray enumerateObjectsUsingBlock:^(Field *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fields"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.oneofsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofs", obj];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSourceContext) {
    [output appendFormat:@"%@%@ {\n", indent, @"sourceContext"];
    [self.sourceContext writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSyntax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syntax", NSStringFromSyntax(self.syntax)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  for (Field* element in self.fieldsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fields"];
  }
  [dictionary setObject:self.oneofs forKey: @"oneofs"];
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  if (self.hasSourceContext) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sourceContext storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sourceContext"];
  }
  if (self.hasSyntax) {
    [dictionary setObject: @(self.syntax) forKey: @"syntax"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Type class]]) {
    return NO;
  }
  Type *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.fieldsArray isEqualToArray:otherMessage.fieldsArray] &&
      [self.oneofsArray isEqualToArray:otherMessage.oneofsArray] &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      self.hasSourceContext == otherMessage.hasSourceContext &&
      (!self.hasSourceContext || [self.sourceContext isEqual:otherMessage.sourceContext]) &&
      self.hasSyntax == otherMessage.hasSyntax &&
      (!self.hasSyntax || self.syntax == otherMessage.syntax) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.fieldsArray enumerateObjectsUsingBlock:^(Field *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.oneofsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSourceContext) {
    hashCode = hashCode * 31 + [self.sourceContext hash];
  }
  if (self.hasSyntax) {
    hashCode = hashCode * 31 + self.syntax;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TypeBuilder()
@property (strong) Type* resultType;
@end

@implementation TypeBuilder
@synthesize resultType;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultType = [[Type alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultType;
}
- (TypeBuilder*) clear {
  self.resultType = [[Type alloc] init];
  return self;
}
- (TypeBuilder*) clone {
  return [Type builderWithPrototype:resultType];
}
- (Type*) defaultInstance {
  return [Type defaultInstance];
}
- (Type*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Type*) buildPartial {
  Type* returnMe = resultType;
  self.resultType = nil;
  return returnMe;
}
- (TypeBuilder*) mergeFrom:(Type*) other {
  if (other == [Type defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.fieldsArray.count > 0) {
    if (resultType.fieldsArray == nil) {
      resultType.fieldsArray = [[NSMutableArray alloc] initWithArray:other.fieldsArray];
    } else {
      [resultType.fieldsArray addObjectsFromArray:other.fieldsArray];
    }
  }
  if (other.oneofsArray.count > 0) {
    if (resultType.oneofsArray == nil) {
      resultType.oneofsArray = [[NSMutableArray alloc] initWithArray:other.oneofsArray];
    } else {
      [resultType.oneofsArray addObjectsFromArray:other.oneofsArray];
    }
  }
  if (other.optionsArray.count > 0) {
    if (resultType.optionsArray == nil) {
      resultType.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultType.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  if (other.hasSourceContext) {
    [self mergeSourceContext:other.sourceContext];
  }
  if (other.hasSyntax) {
    [self setSyntax:other.syntax];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TypeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        FieldBuilder* subBuilder = [Field builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFields:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self addOneofs:[input readString]];
        break;
      }
      case 34: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SourceContextBuilder* subBuilder = [SourceContext builder];
        if (self.hasSourceContext) {
          [subBuilder mergeFrom:self.sourceContext];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSourceContext:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        Syntax value = (Syntax)[input readEnum];
        if (SyntaxIsValidValue(value)) {
          [self setSyntax:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultType.hasName;
}
- (NSString*) name {
  return resultType.name;
}
- (TypeBuilder*) setName:(NSString*) value {
  resultType.hasName = YES;
  resultType.name = value;
  return self;
}
- (TypeBuilder*) clearName {
  resultType.hasName = NO;
  resultType.name = @"";
  return self;
}
- (NSMutableArray<Field*> *)fields {
  return resultType.fieldsArray;
}
- (Field*)fieldsAtIndex:(NSUInteger)index {
  return [resultType fieldsAtIndex:index];
}
- (TypeBuilder *)addFields:(Field*)value {
  if (resultType.fieldsArray == nil) {
    resultType.fieldsArray = [[NSMutableArray alloc]init];
  }
  [resultType.fieldsArray addObject:value];
  return self;
}
- (TypeBuilder *)setFieldsArray:(NSArray<Field*> *)array {
  resultType.fieldsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TypeBuilder *)clearFields {
  resultType.fieldsArray = nil;
  return self;
}
- (NSMutableArray *)oneofs {
  return resultType.oneofsArray;
}
- (NSString*)oneofsAtIndex:(NSUInteger)index {
  return [resultType oneofsAtIndex:index];
}
- (TypeBuilder *)addOneofs:(NSString*)value {
  if (resultType.oneofsArray == nil) {
    resultType.oneofsArray = [[NSMutableArray alloc]init];
  }
  [resultType.oneofsArray addObject:value];
  return self;
}
- (TypeBuilder *)setOneofsArray:(NSArray *)array {
  resultType.oneofsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (TypeBuilder *)clearOneofs {
  resultType.oneofsArray = nil;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultType.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultType optionsAtIndex:index];
}
- (TypeBuilder *)addOptions:(Option*)value {
  if (resultType.optionsArray == nil) {
    resultType.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultType.optionsArray addObject:value];
  return self;
}
- (TypeBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultType.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TypeBuilder *)clearOptions {
  resultType.optionsArray = nil;
  return self;
}
- (BOOL) hasSourceContext {
  return resultType.hasSourceContext;
}
- (SourceContext*) sourceContext {
  return resultType.sourceContext;
}
- (TypeBuilder*) setSourceContext:(SourceContext*) value {
  resultType.hasSourceContext = YES;
  resultType.sourceContext = value;
  return self;
}
- (TypeBuilder*) setSourceContextBuilder:(SourceContextBuilder*) builderForValue {
  return [self setSourceContext:[builderForValue build]];
}
- (TypeBuilder*) mergeSourceContext:(SourceContext*) value {
  if (resultType.hasSourceContext &&
      resultType.sourceContext != [SourceContext defaultInstance]) {
    resultType.sourceContext =
      [[[SourceContext builderWithPrototype:resultType.sourceContext] mergeFrom:value] buildPartial];
  } else {
    resultType.sourceContext = value;
  }
  resultType.hasSourceContext = YES;
  return self;
}
- (TypeBuilder*) clearSourceContext {
  resultType.hasSourceContext = NO;
  resultType.sourceContext = [SourceContext defaultInstance];
  return self;
}
- (BOOL) hasSyntax {
  return resultType.hasSyntax;
}
- (Syntax) syntax {
  return resultType.syntax;
}
- (TypeBuilder*) setSyntax:(Syntax) value {
  resultType.hasSyntax = YES;
  resultType.syntax = value;
  return self;
}
- (TypeBuilder*) clearSyntax {
  resultType.hasSyntax = NO;
  resultType.syntax = SyntaxSyntaxProto2;
  return self;
}
@end

@interface Field ()
@property FieldKind kind;
@property FieldCardinality cardinality;
@property SInt32 number;
@property (strong) NSString* name;
@property (strong) NSString* typeUrl;
@property SInt32 oneofIndex;
@property BOOL packed;
@property (strong) NSMutableArray<Option*> * optionsArray;
@property (strong) NSString* jsonName;
@property (strong) NSString* defaultValue;
@end

@implementation Field

- (BOOL) hasKind {
  return !!hasKind_;
}
- (void) setHasKind:(BOOL) _value_ {
  hasKind_ = !!_value_;
}
@synthesize kind;
- (BOOL) hasCardinality {
  return !!hasCardinality_;
}
- (void) setHasCardinality:(BOOL) _value_ {
  hasCardinality_ = !!_value_;
}
@synthesize cardinality;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTypeUrl {
  return !!hasTypeUrl_;
}
- (void) setHasTypeUrl:(BOOL) _value_ {
  hasTypeUrl_ = !!_value_;
}
@synthesize typeUrl;
- (BOOL) hasOneofIndex {
  return !!hasOneofIndex_;
}
- (void) setHasOneofIndex:(BOOL) _value_ {
  hasOneofIndex_ = !!_value_;
}
@synthesize oneofIndex;
- (BOOL) hasPacked {
  return !!hasPacked_;
}
- (void) setHasPacked:(BOOL) _value_ {
  hasPacked_ = !!_value_;
}
- (BOOL) packed {
  return !!packed_;
}
- (void) setPacked:(BOOL) _value_ {
  packed_ = !!_value_;
}
@synthesize optionsArray;
@dynamic options;
- (BOOL) hasJsonName {
  return !!hasJsonName_;
}
- (void) setHasJsonName:(BOOL) _value_ {
  hasJsonName_ = !!_value_;
}
@synthesize jsonName;
- (BOOL) hasDefaultValue {
  return !!hasDefaultValue_;
}
- (void) setHasDefaultValue:(BOOL) _value_ {
  hasDefaultValue_ = !!_value_;
}
@synthesize defaultValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.kind = FieldKindTypeUnknown;
    self.cardinality = FieldCardinalityCardinalityUnknown;
    self.number = 0;
    self.name = @"";
    self.typeUrl = @"";
    self.oneofIndex = 0;
    self.packed = NO;
    self.jsonName = @"";
    self.defaultValue = @"";
  }
  return self;
}
static Field* defaultFieldInstance = nil;
+ (void) initialize {
  if (self == [Field class]) {
    defaultFieldInstance = [[Field alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFieldInstance;
}
- (instancetype) defaultInstance {
  return defaultFieldInstance;
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKind) {
    [output writeEnum:1 value:self.kind];
  }
  if (self.hasCardinality) {
    [output writeEnum:2 value:self.cardinality];
  }
  if (self.hasNumber) {
    [output writeInt32:3 value:self.number];
  }
  if (self.hasName) {
    [output writeString:4 value:self.name];
  }
  if (self.hasTypeUrl) {
    [output writeString:6 value:self.typeUrl];
  }
  if (self.hasOneofIndex) {
    [output writeInt32:7 value:self.oneofIndex];
  }
  if (self.hasPacked) {
    [output writeBool:8 value:self.packed];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  if (self.hasJsonName) {
    [output writeString:10 value:self.jsonName];
  }
  if (self.hasDefaultValue) {
    [output writeString:11 value:self.defaultValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKind) {
    size_ += computeEnumSize(1, self.kind);
  }
  if (self.hasCardinality) {
    size_ += computeEnumSize(2, self.cardinality);
  }
  if (self.hasNumber) {
    size_ += computeInt32Size(3, self.number);
  }
  if (self.hasName) {
    size_ += computeStringSize(4, self.name);
  }
  if (self.hasTypeUrl) {
    size_ += computeStringSize(6, self.typeUrl);
  }
  if (self.hasOneofIndex) {
    size_ += computeInt32Size(7, self.oneofIndex);
  }
  if (self.hasPacked) {
    size_ += computeBoolSize(8, self.packed);
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  if (self.hasJsonName) {
    size_ += computeStringSize(10, self.jsonName);
  }
  if (self.hasDefaultValue) {
    size_ += computeStringSize(11, self.defaultValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Field*) parseFromData:(NSData*) data {
  return (Field*)[[[Field builder] mergeFromData:data] build];
}
+ (Field*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Field*)[[[Field builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Field*) parseFromInputStream:(NSInputStream*) input {
  return (Field*)[[[Field builder] mergeFromInputStream:input] build];
}
+ (Field*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Field*)[[[Field builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Field*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Field*)[[[Field builder] mergeFromCodedInputStream:input] build];
}
+ (Field*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Field*)[[[Field builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FieldBuilder*) builder {
  return [[FieldBuilder alloc] init];
}
+ (FieldBuilder*) builderWithPrototype:(Field*) prototype {
  return [[Field builder] mergeFrom:prototype];
}
- (FieldBuilder*) builder {
  return [Field builder];
}
- (FieldBuilder*) toBuilder {
  return [Field builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKind) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kind", NSStringFromFieldKind(self.kind)];
  }
  if (self.hasCardinality) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardinality", NSStringFromFieldCardinality(self.cardinality)];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithInteger:self.number]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTypeUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeUrl", self.typeUrl];
  }
  if (self.hasOneofIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oneofIndex", [NSNumber numberWithInteger:self.oneofIndex]];
  }
  if (self.hasPacked) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packed", [NSNumber numberWithBool:self.packed]];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasJsonName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"jsonName", self.jsonName];
  }
  if (self.hasDefaultValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defaultValue", self.defaultValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKind) {
    [dictionary setObject: @(self.kind) forKey: @"kind"];
  }
  if (self.hasCardinality) {
    [dictionary setObject: @(self.cardinality) forKey: @"cardinality"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.number] forKey: @"number"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTypeUrl) {
    [dictionary setObject: self.typeUrl forKey: @"typeUrl"];
  }
  if (self.hasOneofIndex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.oneofIndex] forKey: @"oneofIndex"];
  }
  if (self.hasPacked) {
    [dictionary setObject: [NSNumber numberWithBool:self.packed] forKey: @"packed"];
  }
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  if (self.hasJsonName) {
    [dictionary setObject: self.jsonName forKey: @"jsonName"];
  }
  if (self.hasDefaultValue) {
    [dictionary setObject: self.defaultValue forKey: @"defaultValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Field class]]) {
    return NO;
  }
  Field *otherMessage = other;
  return
      self.hasKind == otherMessage.hasKind &&
      (!self.hasKind || self.kind == otherMessage.kind) &&
      self.hasCardinality == otherMessage.hasCardinality &&
      (!self.hasCardinality || self.cardinality == otherMessage.cardinality) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTypeUrl == otherMessage.hasTypeUrl &&
      (!self.hasTypeUrl || [self.typeUrl isEqual:otherMessage.typeUrl]) &&
      self.hasOneofIndex == otherMessage.hasOneofIndex &&
      (!self.hasOneofIndex || self.oneofIndex == otherMessage.oneofIndex) &&
      self.hasPacked == otherMessage.hasPacked &&
      (!self.hasPacked || self.packed == otherMessage.packed) &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      self.hasJsonName == otherMessage.hasJsonName &&
      (!self.hasJsonName || [self.jsonName isEqual:otherMessage.jsonName]) &&
      self.hasDefaultValue == otherMessage.hasDefaultValue &&
      (!self.hasDefaultValue || [self.defaultValue isEqual:otherMessage.defaultValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKind) {
    hashCode = hashCode * 31 + self.kind;
  }
  if (self.hasCardinality) {
    hashCode = hashCode * 31 + self.cardinality;
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.number] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTypeUrl) {
    hashCode = hashCode * 31 + [self.typeUrl hash];
  }
  if (self.hasOneofIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oneofIndex] hash];
  }
  if (self.hasPacked) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.packed] hash];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasJsonName) {
    hashCode = hashCode * 31 + [self.jsonName hash];
  }
  if (self.hasDefaultValue) {
    hashCode = hashCode * 31 + [self.defaultValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL FieldKindIsValidValue(FieldKind value) {
  switch (value) {
    case FieldKindTypeUnknown:
    case FieldKindTypeDouble:
    case FieldKindTypeFloat:
    case FieldKindTypeInt64:
    case FieldKindTypeUint64:
    case FieldKindTypeInt32:
    case FieldKindTypeFixed64:
    case FieldKindTypeFixed32:
    case FieldKindTypeBool:
    case FieldKindTypeString:
    case FieldKindTypeGroup:
    case FieldKindTypeMessage:
    case FieldKindTypeBytes:
    case FieldKindTypeUint32:
    case FieldKindTypeEnum:
    case FieldKindTypeSfixed32:
    case FieldKindTypeSfixed64:
    case FieldKindTypeSint32:
    case FieldKindTypeSint64:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFieldKind(FieldKind value) {
  switch (value) {
    case FieldKindTypeUnknown:
      return @"FieldKindTypeUnknown";
    case FieldKindTypeDouble:
      return @"FieldKindTypeDouble";
    case FieldKindTypeFloat:
      return @"FieldKindTypeFloat";
    case FieldKindTypeInt64:
      return @"FieldKindTypeInt64";
    case FieldKindTypeUint64:
      return @"FieldKindTypeUint64";
    case FieldKindTypeInt32:
      return @"FieldKindTypeInt32";
    case FieldKindTypeFixed64:
      return @"FieldKindTypeFixed64";
    case FieldKindTypeFixed32:
      return @"FieldKindTypeFixed32";
    case FieldKindTypeBool:
      return @"FieldKindTypeBool";
    case FieldKindTypeString:
      return @"FieldKindTypeString";
    case FieldKindTypeGroup:
      return @"FieldKindTypeGroup";
    case FieldKindTypeMessage:
      return @"FieldKindTypeMessage";
    case FieldKindTypeBytes:
      return @"FieldKindTypeBytes";
    case FieldKindTypeUint32:
      return @"FieldKindTypeUint32";
    case FieldKindTypeEnum:
      return @"FieldKindTypeEnum";
    case FieldKindTypeSfixed32:
      return @"FieldKindTypeSfixed32";
    case FieldKindTypeSfixed64:
      return @"FieldKindTypeSfixed64";
    case FieldKindTypeSint32:
      return @"FieldKindTypeSint32";
    case FieldKindTypeSint64:
      return @"FieldKindTypeSint64";
    default:
      return nil;
  }
}

BOOL FieldCardinalityIsValidValue(FieldCardinality value) {
  switch (value) {
    case FieldCardinalityCardinalityUnknown:
    case FieldCardinalityCardinalityOptional:
    case FieldCardinalityCardinalityRequired:
    case FieldCardinalityCardinalityRepeated:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFieldCardinality(FieldCardinality value) {
  switch (value) {
    case FieldCardinalityCardinalityUnknown:
      return @"FieldCardinalityCardinalityUnknown";
    case FieldCardinalityCardinalityOptional:
      return @"FieldCardinalityCardinalityOptional";
    case FieldCardinalityCardinalityRequired:
      return @"FieldCardinalityCardinalityRequired";
    case FieldCardinalityCardinalityRepeated:
      return @"FieldCardinalityCardinalityRepeated";
    default:
      return nil;
  }
}

@interface FieldBuilder()
@property (strong) Field* resultField;
@end

@implementation FieldBuilder
@synthesize resultField;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultField = [[Field alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultField;
}
- (FieldBuilder*) clear {
  self.resultField = [[Field alloc] init];
  return self;
}
- (FieldBuilder*) clone {
  return [Field builderWithPrototype:resultField];
}
- (Field*) defaultInstance {
  return [Field defaultInstance];
}
- (Field*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Field*) buildPartial {
  Field* returnMe = resultField;
  self.resultField = nil;
  return returnMe;
}
- (FieldBuilder*) mergeFrom:(Field*) other {
  if (other == [Field defaultInstance]) {
    return self;
  }
  if (other.hasKind) {
    [self setKind:other.kind];
  }
  if (other.hasCardinality) {
    [self setCardinality:other.cardinality];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTypeUrl) {
    [self setTypeUrl:other.typeUrl];
  }
  if (other.hasOneofIndex) {
    [self setOneofIndex:other.oneofIndex];
  }
  if (other.hasPacked) {
    [self setPacked:other.packed];
  }
  if (other.optionsArray.count > 0) {
    if (resultField.optionsArray == nil) {
      resultField.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultField.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  if (other.hasJsonName) {
    [self setJsonName:other.jsonName];
  }
  if (other.hasDefaultValue) {
    [self setDefaultValue:other.defaultValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FieldBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FieldBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        FieldKind value = (FieldKind)[input readEnum];
        if (FieldKindIsValidValue(value)) {
          [self setKind:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        FieldCardinality value = (FieldCardinality)[input readEnum];
        if (FieldCardinalityIsValidValue(value)) {
          [self setCardinality:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setNumber:[input readInt32]];
        break;
      }
      case 34: {
        [self setName:[input readString]];
        break;
      }
      case 50: {
        [self setTypeUrl:[input readString]];
        break;
      }
      case 56: {
        [self setOneofIndex:[input readInt32]];
        break;
      }
      case 64: {
        [self setPacked:[input readBool]];
        break;
      }
      case 74: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        [self setJsonName:[input readString]];
        break;
      }
      case 90: {
        [self setDefaultValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKind {
  return resultField.hasKind;
}
- (FieldKind) kind {
  return resultField.kind;
}
- (FieldBuilder*) setKind:(FieldKind) value {
  resultField.hasKind = YES;
  resultField.kind = value;
  return self;
}
- (FieldBuilder*) clearKind {
  resultField.hasKind = NO;
  resultField.kind = FieldKindTypeUnknown;
  return self;
}
- (BOOL) hasCardinality {
  return resultField.hasCardinality;
}
- (FieldCardinality) cardinality {
  return resultField.cardinality;
}
- (FieldBuilder*) setCardinality:(FieldCardinality) value {
  resultField.hasCardinality = YES;
  resultField.cardinality = value;
  return self;
}
- (FieldBuilder*) clearCardinality {
  resultField.hasCardinality = NO;
  resultField.cardinality = FieldCardinalityCardinalityUnknown;
  return self;
}
- (BOOL) hasNumber {
  return resultField.hasNumber;
}
- (SInt32) number {
  return resultField.number;
}
- (FieldBuilder*) setNumber:(SInt32) value {
  resultField.hasNumber = YES;
  resultField.number = value;
  return self;
}
- (FieldBuilder*) clearNumber {
  resultField.hasNumber = NO;
  resultField.number = 0;
  return self;
}
- (BOOL) hasName {
  return resultField.hasName;
}
- (NSString*) name {
  return resultField.name;
}
- (FieldBuilder*) setName:(NSString*) value {
  resultField.hasName = YES;
  resultField.name = value;
  return self;
}
- (FieldBuilder*) clearName {
  resultField.hasName = NO;
  resultField.name = @"";
  return self;
}
- (BOOL) hasTypeUrl {
  return resultField.hasTypeUrl;
}
- (NSString*) typeUrl {
  return resultField.typeUrl;
}
- (FieldBuilder*) setTypeUrl:(NSString*) value {
  resultField.hasTypeUrl = YES;
  resultField.typeUrl = value;
  return self;
}
- (FieldBuilder*) clearTypeUrl {
  resultField.hasTypeUrl = NO;
  resultField.typeUrl = @"";
  return self;
}
- (BOOL) hasOneofIndex {
  return resultField.hasOneofIndex;
}
- (SInt32) oneofIndex {
  return resultField.oneofIndex;
}
- (FieldBuilder*) setOneofIndex:(SInt32) value {
  resultField.hasOneofIndex = YES;
  resultField.oneofIndex = value;
  return self;
}
- (FieldBuilder*) clearOneofIndex {
  resultField.hasOneofIndex = NO;
  resultField.oneofIndex = 0;
  return self;
}
- (BOOL) hasPacked {
  return resultField.hasPacked;
}
- (BOOL) packed {
  return resultField.packed;
}
- (FieldBuilder*) setPacked:(BOOL) value {
  resultField.hasPacked = YES;
  resultField.packed = value;
  return self;
}
- (FieldBuilder*) clearPacked {
  resultField.hasPacked = NO;
  resultField.packed = NO;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultField.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultField optionsAtIndex:index];
}
- (FieldBuilder *)addOptions:(Option*)value {
  if (resultField.optionsArray == nil) {
    resultField.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultField.optionsArray addObject:value];
  return self;
}
- (FieldBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultField.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (FieldBuilder *)clearOptions {
  resultField.optionsArray = nil;
  return self;
}
- (BOOL) hasJsonName {
  return resultField.hasJsonName;
}
- (NSString*) jsonName {
  return resultField.jsonName;
}
- (FieldBuilder*) setJsonName:(NSString*) value {
  resultField.hasJsonName = YES;
  resultField.jsonName = value;
  return self;
}
- (FieldBuilder*) clearJsonName {
  resultField.hasJsonName = NO;
  resultField.jsonName = @"";
  return self;
}
- (BOOL) hasDefaultValue {
  return resultField.hasDefaultValue;
}
- (NSString*) defaultValue {
  return resultField.defaultValue;
}
- (FieldBuilder*) setDefaultValue:(NSString*) value {
  resultField.hasDefaultValue = YES;
  resultField.defaultValue = value;
  return self;
}
- (FieldBuilder*) clearDefaultValue {
  resultField.hasDefaultValue = NO;
  resultField.defaultValue = @"";
  return self;
}
@end

@interface Enum ()
@property (strong) NSString* name;
@property (strong) NSMutableArray<EnumValue*> * enumvalueArray;
@property (strong) NSMutableArray<Option*> * optionsArray;
@property (strong) SourceContext* sourceContext;
@property Syntax syntax;
@end

@implementation Enum

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize enumvalueArray;
@dynamic enumvalue;
@synthesize optionsArray;
@dynamic options;
- (BOOL) hasSourceContext {
  return !!hasSourceContext_;
}
- (void) setHasSourceContext:(BOOL) _value_ {
  hasSourceContext_ = !!_value_;
}
@synthesize sourceContext;
- (BOOL) hasSyntax {
  return !!hasSyntax_;
}
- (void) setHasSyntax:(BOOL) _value_ {
  hasSyntax_ = !!_value_;
}
@synthesize syntax;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.sourceContext = [SourceContext defaultInstance];
    self.syntax = SyntaxSyntaxProto2;
  }
  return self;
}
static Enum* defaultEnumInstance = nil;
+ (void) initialize {
  if (self == [Enum class]) {
    defaultEnumInstance = [[Enum alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEnumInstance;
}
- (instancetype) defaultInstance {
  return defaultEnumInstance;
}
- (NSArray<EnumValue*> *)enumvalue {
  return enumvalueArray;
}
- (EnumValue*)enumvalueAtIndex:(NSUInteger)index {
  return [enumvalueArray objectAtIndex:index];
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self.enumvalueArray enumerateObjectsUsingBlock:^(EnumValue *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasSourceContext) {
    [output writeMessage:4 value:self.sourceContext];
  }
  if (self.hasSyntax) {
    [output writeEnum:5 value:self.syntax];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  [self.enumvalueArray enumerateObjectsUsingBlock:^(EnumValue *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasSourceContext) {
    size_ += computeMessageSize(4, self.sourceContext);
  }
  if (self.hasSyntax) {
    size_ += computeEnumSize(5, self.syntax);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Enum*) parseFromData:(NSData*) data {
  return (Enum*)[[[Enum builder] mergeFromData:data] build];
}
+ (Enum*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Enum*)[[[Enum builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Enum*) parseFromInputStream:(NSInputStream*) input {
  return (Enum*)[[[Enum builder] mergeFromInputStream:input] build];
}
+ (Enum*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Enum*)[[[Enum builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Enum*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Enum*)[[[Enum builder] mergeFromCodedInputStream:input] build];
}
+ (Enum*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Enum*)[[[Enum builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnumBuilder*) builder {
  return [[EnumBuilder alloc] init];
}
+ (EnumBuilder*) builderWithPrototype:(Enum*) prototype {
  return [[Enum builder] mergeFrom:prototype];
}
- (EnumBuilder*) builder {
  return [Enum builder];
}
- (EnumBuilder*) toBuilder {
  return [Enum builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.enumvalueArray enumerateObjectsUsingBlock:^(EnumValue *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"enumvalue"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSourceContext) {
    [output appendFormat:@"%@%@ {\n", indent, @"sourceContext"];
    [self.sourceContext writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSyntax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syntax", NSStringFromSyntax(self.syntax)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  for (EnumValue* element in self.enumvalueArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"enumvalue"];
  }
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  if (self.hasSourceContext) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sourceContext storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sourceContext"];
  }
  if (self.hasSyntax) {
    [dictionary setObject: @(self.syntax) forKey: @"syntax"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Enum class]]) {
    return NO;
  }
  Enum *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.enumvalueArray isEqualToArray:otherMessage.enumvalueArray] &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      self.hasSourceContext == otherMessage.hasSourceContext &&
      (!self.hasSourceContext || [self.sourceContext isEqual:otherMessage.sourceContext]) &&
      self.hasSyntax == otherMessage.hasSyntax &&
      (!self.hasSyntax || self.syntax == otherMessage.syntax) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.enumvalueArray enumerateObjectsUsingBlock:^(EnumValue *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSourceContext) {
    hashCode = hashCode * 31 + [self.sourceContext hash];
  }
  if (self.hasSyntax) {
    hashCode = hashCode * 31 + self.syntax;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EnumBuilder()
@property (strong) Enum* resultEnum;
@end

@implementation EnumBuilder
@synthesize resultEnum;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEnum = [[Enum alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEnum;
}
- (EnumBuilder*) clear {
  self.resultEnum = [[Enum alloc] init];
  return self;
}
- (EnumBuilder*) clone {
  return [Enum builderWithPrototype:resultEnum];
}
- (Enum*) defaultInstance {
  return [Enum defaultInstance];
}
- (Enum*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Enum*) buildPartial {
  Enum* returnMe = resultEnum;
  self.resultEnum = nil;
  return returnMe;
}
- (EnumBuilder*) mergeFrom:(Enum*) other {
  if (other == [Enum defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.enumvalueArray.count > 0) {
    if (resultEnum.enumvalueArray == nil) {
      resultEnum.enumvalueArray = [[NSMutableArray alloc] initWithArray:other.enumvalueArray];
    } else {
      [resultEnum.enumvalueArray addObjectsFromArray:other.enumvalueArray];
    }
  }
  if (other.optionsArray.count > 0) {
    if (resultEnum.optionsArray == nil) {
      resultEnum.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultEnum.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  if (other.hasSourceContext) {
    [self mergeSourceContext:other.sourceContext];
  }
  if (other.hasSyntax) {
    [self setSyntax:other.syntax];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EnumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EnumBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        EnumValueBuilder* subBuilder = [EnumValue builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEnumvalue:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        SourceContextBuilder* subBuilder = [SourceContext builder];
        if (self.hasSourceContext) {
          [subBuilder mergeFrom:self.sourceContext];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSourceContext:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        Syntax value = (Syntax)[input readEnum];
        if (SyntaxIsValidValue(value)) {
          [self setSyntax:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultEnum.hasName;
}
- (NSString*) name {
  return resultEnum.name;
}
- (EnumBuilder*) setName:(NSString*) value {
  resultEnum.hasName = YES;
  resultEnum.name = value;
  return self;
}
- (EnumBuilder*) clearName {
  resultEnum.hasName = NO;
  resultEnum.name = @"";
  return self;
}
- (NSMutableArray<EnumValue*> *)enumvalue {
  return resultEnum.enumvalueArray;
}
- (EnumValue*)enumvalueAtIndex:(NSUInteger)index {
  return [resultEnum enumvalueAtIndex:index];
}
- (EnumBuilder *)addEnumvalue:(EnumValue*)value {
  if (resultEnum.enumvalueArray == nil) {
    resultEnum.enumvalueArray = [[NSMutableArray alloc]init];
  }
  [resultEnum.enumvalueArray addObject:value];
  return self;
}
- (EnumBuilder *)setEnumvalueArray:(NSArray<EnumValue*> *)array {
  resultEnum.enumvalueArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (EnumBuilder *)clearEnumvalue {
  resultEnum.enumvalueArray = nil;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultEnum.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultEnum optionsAtIndex:index];
}
- (EnumBuilder *)addOptions:(Option*)value {
  if (resultEnum.optionsArray == nil) {
    resultEnum.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultEnum.optionsArray addObject:value];
  return self;
}
- (EnumBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultEnum.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (EnumBuilder *)clearOptions {
  resultEnum.optionsArray = nil;
  return self;
}
- (BOOL) hasSourceContext {
  return resultEnum.hasSourceContext;
}
- (SourceContext*) sourceContext {
  return resultEnum.sourceContext;
}
- (EnumBuilder*) setSourceContext:(SourceContext*) value {
  resultEnum.hasSourceContext = YES;
  resultEnum.sourceContext = value;
  return self;
}
- (EnumBuilder*) setSourceContextBuilder:(SourceContextBuilder*) builderForValue {
  return [self setSourceContext:[builderForValue build]];
}
- (EnumBuilder*) mergeSourceContext:(SourceContext*) value {
  if (resultEnum.hasSourceContext &&
      resultEnum.sourceContext != [SourceContext defaultInstance]) {
    resultEnum.sourceContext =
      [[[SourceContext builderWithPrototype:resultEnum.sourceContext] mergeFrom:value] buildPartial];
  } else {
    resultEnum.sourceContext = value;
  }
  resultEnum.hasSourceContext = YES;
  return self;
}
- (EnumBuilder*) clearSourceContext {
  resultEnum.hasSourceContext = NO;
  resultEnum.sourceContext = [SourceContext defaultInstance];
  return self;
}
- (BOOL) hasSyntax {
  return resultEnum.hasSyntax;
}
- (Syntax) syntax {
  return resultEnum.syntax;
}
- (EnumBuilder*) setSyntax:(Syntax) value {
  resultEnum.hasSyntax = YES;
  resultEnum.syntax = value;
  return self;
}
- (EnumBuilder*) clearSyntax {
  resultEnum.hasSyntax = NO;
  resultEnum.syntax = SyntaxSyntaxProto2;
  return self;
}
@end

@interface EnumValue ()
@property (strong) NSString* name;
@property SInt32 number;
@property (strong) NSMutableArray<Option*> * optionsArray;
@end

@implementation EnumValue

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasNumber {
  return !!hasNumber_;
}
- (void) setHasNumber:(BOOL) _value_ {
  hasNumber_ = !!_value_;
}
@synthesize number;
@synthesize optionsArray;
@dynamic options;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.number = 0;
  }
  return self;
}
static EnumValue* defaultEnumValueInstance = nil;
+ (void) initialize {
  if (self == [EnumValue class]) {
    defaultEnumValueInstance = [[EnumValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultEnumValueInstance;
}
- (instancetype) defaultInstance {
  return defaultEnumValueInstance;
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasNumber) {
    [output writeInt32:2 value:self.number];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasNumber) {
    size_ += computeInt32Size(2, self.number);
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EnumValue*) parseFromData:(NSData*) data {
  return (EnumValue*)[[[EnumValue builder] mergeFromData:data] build];
}
+ (EnumValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnumValue*)[[[EnumValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (EnumValue*) parseFromInputStream:(NSInputStream*) input {
  return (EnumValue*)[[[EnumValue builder] mergeFromInputStream:input] build];
}
+ (EnumValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnumValue*)[[[EnumValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnumValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (EnumValue*)[[[EnumValue builder] mergeFromCodedInputStream:input] build];
}
+ (EnumValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (EnumValue*)[[[EnumValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (EnumValueBuilder*) builder {
  return [[EnumValueBuilder alloc] init];
}
+ (EnumValueBuilder*) builderWithPrototype:(EnumValue*) prototype {
  return [[EnumValue builder] mergeFrom:prototype];
}
- (EnumValueBuilder*) builder {
  return [EnumValue builder];
}
- (EnumValueBuilder*) toBuilder {
  return [EnumValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNumber) {
    [output appendFormat:@"%@%@: %@\n", indent, @"number", [NSNumber numberWithInteger:self.number]];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasNumber) {
    [dictionary setObject: [NSNumber numberWithInteger:self.number] forKey: @"number"];
  }
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[EnumValue class]]) {
    return NO;
  }
  EnumValue *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNumber == otherMessage.hasNumber &&
      (!self.hasNumber || self.number == otherMessage.number) &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNumber) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.number] hash];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface EnumValueBuilder()
@property (strong) EnumValue* resultEnumValue;
@end

@implementation EnumValueBuilder
@synthesize resultEnumValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultEnumValue = [[EnumValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultEnumValue;
}
- (EnumValueBuilder*) clear {
  self.resultEnumValue = [[EnumValue alloc] init];
  return self;
}
- (EnumValueBuilder*) clone {
  return [EnumValue builderWithPrototype:resultEnumValue];
}
- (EnumValue*) defaultInstance {
  return [EnumValue defaultInstance];
}
- (EnumValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (EnumValue*) buildPartial {
  EnumValue* returnMe = resultEnumValue;
  self.resultEnumValue = nil;
  return returnMe;
}
- (EnumValueBuilder*) mergeFrom:(EnumValue*) other {
  if (other == [EnumValue defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNumber) {
    [self setNumber:other.number];
  }
  if (other.optionsArray.count > 0) {
    if (resultEnumValue.optionsArray == nil) {
      resultEnumValue.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultEnumValue.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (EnumValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (EnumValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setNumber:[input readInt32]];
        break;
      }
      case 26: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultEnumValue.hasName;
}
- (NSString*) name {
  return resultEnumValue.name;
}
- (EnumValueBuilder*) setName:(NSString*) value {
  resultEnumValue.hasName = YES;
  resultEnumValue.name = value;
  return self;
}
- (EnumValueBuilder*) clearName {
  resultEnumValue.hasName = NO;
  resultEnumValue.name = @"";
  return self;
}
- (BOOL) hasNumber {
  return resultEnumValue.hasNumber;
}
- (SInt32) number {
  return resultEnumValue.number;
}
- (EnumValueBuilder*) setNumber:(SInt32) value {
  resultEnumValue.hasNumber = YES;
  resultEnumValue.number = value;
  return self;
}
- (EnumValueBuilder*) clearNumber {
  resultEnumValue.hasNumber = NO;
  resultEnumValue.number = 0;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultEnumValue.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultEnumValue optionsAtIndex:index];
}
- (EnumValueBuilder *)addOptions:(Option*)value {
  if (resultEnumValue.optionsArray == nil) {
    resultEnumValue.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultEnumValue.optionsArray addObject:value];
  return self;
}
- (EnumValueBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultEnumValue.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (EnumValueBuilder *)clearOptions {
  resultEnumValue.optionsArray = nil;
  return self;
}
@end

@interface Option ()
@property (strong) NSString* name;
@property (strong) Any* value;
@end

@implementation Option

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.value = [Any defaultInstance];
  }
  return self;
}
static Option* defaultOptionInstance = nil;
+ (void) initialize {
  if (self == [Option class]) {
    defaultOptionInstance = [[Option alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultOptionInstance;
}
- (instancetype) defaultInstance {
  return defaultOptionInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasValue) {
    [output writeMessage:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasValue) {
    size_ += computeMessageSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Option*) parseFromData:(NSData*) data {
  return (Option*)[[[Option builder] mergeFromData:data] build];
}
+ (Option*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Option*)[[[Option builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Option*) parseFromInputStream:(NSInputStream*) input {
  return (Option*)[[[Option builder] mergeFromInputStream:input] build];
}
+ (Option*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Option*)[[[Option builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Option*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Option*)[[[Option builder] mergeFromCodedInputStream:input] build];
}
+ (Option*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Option*)[[[Option builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (OptionBuilder*) builder {
  return [[OptionBuilder alloc] init];
}
+ (OptionBuilder*) builderWithPrototype:(Option*) prototype {
  return [[Option builder] mergeFrom:prototype];
}
- (OptionBuilder*) builder {
  return [Option builder];
}
- (OptionBuilder*) toBuilder {
  return [Option builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@ {\n", indent, @"value"];
    [self.value writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasValue) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.value storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Option class]]) {
    return NO;
  }
  Option *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface OptionBuilder()
@property (strong) Option* resultOption;
@end

@implementation OptionBuilder
@synthesize resultOption;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultOption = [[Option alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultOption;
}
- (OptionBuilder*) clear {
  self.resultOption = [[Option alloc] init];
  return self;
}
- (OptionBuilder*) clone {
  return [Option builderWithPrototype:resultOption];
}
- (Option*) defaultInstance {
  return [Option defaultInstance];
}
- (Option*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Option*) buildPartial {
  Option* returnMe = resultOption;
  self.resultOption = nil;
  return returnMe;
}
- (OptionBuilder*) mergeFrom:(Option*) other {
  if (other == [Option defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasValue) {
    [self mergeValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (OptionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (OptionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        AnyBuilder* subBuilder = [Any builder];
        if (self.hasValue) {
          [subBuilder mergeFrom:self.value];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setValue:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultOption.hasName;
}
- (NSString*) name {
  return resultOption.name;
}
- (OptionBuilder*) setName:(NSString*) value {
  resultOption.hasName = YES;
  resultOption.name = value;
  return self;
}
- (OptionBuilder*) clearName {
  resultOption.hasName = NO;
  resultOption.name = @"";
  return self;
}
- (BOOL) hasValue {
  return resultOption.hasValue;
}
- (Any*) value {
  return resultOption.value;
}
- (OptionBuilder*) setValue:(Any*) value {
  resultOption.hasValue = YES;
  resultOption.value = value;
  return self;
}
- (OptionBuilder*) setValueBuilder:(AnyBuilder*) builderForValue {
  return [self setValue:[builderForValue build]];
}
- (OptionBuilder*) mergeValue:(Any*) value {
  if (resultOption.hasValue &&
      resultOption.value != [Any defaultInstance]) {
    resultOption.value =
      [[[Any builderWithPrototype:resultOption.value] mergeFrom:value] buildPartial];
  } else {
    resultOption.value = value;
  }
  resultOption.hasValue = YES;
  return self;
}
- (OptionBuilder*) clearValue {
  resultOption.hasValue = NO;
  resultOption.value = [Any defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
