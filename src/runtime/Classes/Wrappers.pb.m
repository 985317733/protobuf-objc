// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Wrappers.pb.h"
// @@protoc_insertion_point(imports)

@implementation WrappersRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WrappersRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface DoubleValue ()
@property Float64 value;
@end

@implementation DoubleValue

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0;
  }
  return self;
}
static DoubleValue* defaultDoubleValueInstance = nil;
+ (void) initialize {
  if (self == [DoubleValue class]) {
    defaultDoubleValueInstance = [[DoubleValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDoubleValueInstance;
}
- (instancetype) defaultInstance {
  return defaultDoubleValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeDouble:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeDoubleSize(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DoubleValue*) parseFromData:(NSData*) data {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromData:data] build];
}
+ (DoubleValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DoubleValue*) parseFromInputStream:(NSInputStream*) input {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromInputStream:input] build];
}
+ (DoubleValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DoubleValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromCodedInputStream:input] build];
}
+ (DoubleValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DoubleValue*)[[[DoubleValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DoubleValueBuilder*) builder {
  return [[DoubleValueBuilder alloc] init];
}
+ (DoubleValueBuilder*) builderWithPrototype:(DoubleValue*) prototype {
  return [[DoubleValue builder] mergeFrom:prototype];
}
- (DoubleValueBuilder*) builder {
  return [DoubleValue builder];
}
- (DoubleValueBuilder*) toBuilder {
  return [DoubleValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithDouble:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DoubleValue class]]) {
    return NO;
  }
  DoubleValue *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DoubleValueBuilder()
@property (strong) DoubleValue* resultDoubleValue;
@end

@implementation DoubleValueBuilder
@synthesize resultDoubleValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDoubleValue = [[DoubleValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDoubleValue;
}
- (DoubleValueBuilder*) clear {
  self.resultDoubleValue = [[DoubleValue alloc] init];
  return self;
}
- (DoubleValueBuilder*) clone {
  return [DoubleValue builderWithPrototype:resultDoubleValue];
}
- (DoubleValue*) defaultInstance {
  return [DoubleValue defaultInstance];
}
- (DoubleValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DoubleValue*) buildPartial {
  DoubleValue* returnMe = resultDoubleValue;
  self.resultDoubleValue = nil;
  return returnMe;
}
- (DoubleValueBuilder*) mergeFrom:(DoubleValue*) other {
  if (other == [DoubleValue defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DoubleValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DoubleValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setValue:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultDoubleValue.hasValue;
}
- (Float64) value {
  return resultDoubleValue.value;
}
- (DoubleValueBuilder*) setValue:(Float64) value {
  resultDoubleValue.hasValue = YES;
  resultDoubleValue.value = value;
  return self;
}
- (DoubleValueBuilder*) clearValue {
  resultDoubleValue.hasValue = NO;
  resultDoubleValue.value = 0;
  return self;
}
@end

@interface FloatValue ()
@property Float32 value;
@end

@implementation FloatValue

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0;
  }
  return self;
}
static FloatValue* defaultFloatValueInstance = nil;
+ (void) initialize {
  if (self == [FloatValue class]) {
    defaultFloatValueInstance = [[FloatValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFloatValueInstance;
}
- (instancetype) defaultInstance {
  return defaultFloatValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeFloat:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeFloatSize(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FloatValue*) parseFromData:(NSData*) data {
  return (FloatValue*)[[[FloatValue builder] mergeFromData:data] build];
}
+ (FloatValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FloatValue*)[[[FloatValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FloatValue*) parseFromInputStream:(NSInputStream*) input {
  return (FloatValue*)[[[FloatValue builder] mergeFromInputStream:input] build];
}
+ (FloatValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FloatValue*)[[[FloatValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FloatValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FloatValue*)[[[FloatValue builder] mergeFromCodedInputStream:input] build];
}
+ (FloatValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FloatValue*)[[[FloatValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FloatValueBuilder*) builder {
  return [[FloatValueBuilder alloc] init];
}
+ (FloatValueBuilder*) builderWithPrototype:(FloatValue*) prototype {
  return [[FloatValue builder] mergeFrom:prototype];
}
- (FloatValueBuilder*) builder {
  return [FloatValue builder];
}
- (FloatValueBuilder*) toBuilder {
  return [FloatValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithFloat:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithFloat:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FloatValue class]]) {
    return NO;
  }
  FloatValue *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FloatValueBuilder()
@property (strong) FloatValue* resultFloatValue;
@end

@implementation FloatValueBuilder
@synthesize resultFloatValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFloatValue = [[FloatValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFloatValue;
}
- (FloatValueBuilder*) clear {
  self.resultFloatValue = [[FloatValue alloc] init];
  return self;
}
- (FloatValueBuilder*) clone {
  return [FloatValue builderWithPrototype:resultFloatValue];
}
- (FloatValue*) defaultInstance {
  return [FloatValue defaultInstance];
}
- (FloatValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FloatValue*) buildPartial {
  FloatValue* returnMe = resultFloatValue;
  self.resultFloatValue = nil;
  return returnMe;
}
- (FloatValueBuilder*) mergeFrom:(FloatValue*) other {
  if (other == [FloatValue defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FloatValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FloatValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setValue:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultFloatValue.hasValue;
}
- (Float32) value {
  return resultFloatValue.value;
}
- (FloatValueBuilder*) setValue:(Float32) value {
  resultFloatValue.hasValue = YES;
  resultFloatValue.value = value;
  return self;
}
- (FloatValueBuilder*) clearValue {
  resultFloatValue.hasValue = NO;
  resultFloatValue.value = 0;
  return self;
}
@end

@interface Int64Value ()
@property SInt64 value;
@end

@implementation Int64Value

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0L;
  }
  return self;
}
static Int64Value* defaultInt64ValueInstance = nil;
+ (void) initialize {
  if (self == [Int64Value class]) {
    defaultInt64ValueInstance = [[Int64Value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInt64ValueInstance;
}
- (instancetype) defaultInstance {
  return defaultInt64ValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeInt64:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeInt64Size(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Int64Value*) parseFromData:(NSData*) data {
  return (Int64Value*)[[[Int64Value builder] mergeFromData:data] build];
}
+ (Int64Value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Value*)[[[Int64Value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Int64Value*) parseFromInputStream:(NSInputStream*) input {
  return (Int64Value*)[[[Int64Value builder] mergeFromInputStream:input] build];
}
+ (Int64Value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Value*)[[[Int64Value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64Value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Int64Value*)[[[Int64Value builder] mergeFromCodedInputStream:input] build];
}
+ (Int64Value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Value*)[[[Int64Value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64ValueBuilder*) builder {
  return [[Int64ValueBuilder alloc] init];
}
+ (Int64ValueBuilder*) builderWithPrototype:(Int64Value*) prototype {
  return [[Int64Value builder] mergeFrom:prototype];
}
- (Int64ValueBuilder*) builder {
  return [Int64Value builder];
}
- (Int64ValueBuilder*) toBuilder {
  return [Int64Value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithLongLong:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Int64Value class]]) {
    return NO;
  }
  Int64Value *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Int64ValueBuilder()
@property (strong) Int64Value* resultInt64Value;
@end

@implementation Int64ValueBuilder
@synthesize resultInt64Value;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInt64Value = [[Int64Value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInt64Value;
}
- (Int64ValueBuilder*) clear {
  self.resultInt64Value = [[Int64Value alloc] init];
  return self;
}
- (Int64ValueBuilder*) clone {
  return [Int64Value builderWithPrototype:resultInt64Value];
}
- (Int64Value*) defaultInstance {
  return [Int64Value defaultInstance];
}
- (Int64Value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Int64Value*) buildPartial {
  Int64Value* returnMe = resultInt64Value;
  self.resultInt64Value = nil;
  return returnMe;
}
- (Int64ValueBuilder*) mergeFrom:(Int64Value*) other {
  if (other == [Int64Value defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Int64ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Int64ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValue:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultInt64Value.hasValue;
}
- (SInt64) value {
  return resultInt64Value.value;
}
- (Int64ValueBuilder*) setValue:(SInt64) value {
  resultInt64Value.hasValue = YES;
  resultInt64Value.value = value;
  return self;
}
- (Int64ValueBuilder*) clearValue {
  resultInt64Value.hasValue = NO;
  resultInt64Value.value = 0L;
  return self;
}
@end

@interface UInt64Value ()
@property UInt64 value;
@end

@implementation UInt64Value

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0L;
  }
  return self;
}
static UInt64Value* defaultUInt64ValueInstance = nil;
+ (void) initialize {
  if (self == [UInt64Value class]) {
    defaultUInt64ValueInstance = [[UInt64Value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUInt64ValueInstance;
}
- (instancetype) defaultInstance {
  return defaultUInt64ValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeUInt64:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeUInt64Size(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UInt64Value*) parseFromData:(NSData*) data {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromData:data] build];
}
+ (UInt64Value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UInt64Value*) parseFromInputStream:(NSInputStream*) input {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromInputStream:input] build];
}
+ (UInt64Value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UInt64Value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromCodedInputStream:input] build];
}
+ (UInt64Value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt64Value*)[[[UInt64Value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UInt64ValueBuilder*) builder {
  return [[UInt64ValueBuilder alloc] init];
}
+ (UInt64ValueBuilder*) builderWithPrototype:(UInt64Value*) prototype {
  return [[UInt64Value builder] mergeFrom:prototype];
}
- (UInt64ValueBuilder*) builder {
  return [UInt64Value builder];
}
- (UInt64ValueBuilder*) toBuilder {
  return [UInt64Value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithLongLong:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UInt64Value class]]) {
    return NO;
  }
  UInt64Value *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UInt64ValueBuilder()
@property (strong) UInt64Value* resultUint64Value;
@end

@implementation UInt64ValueBuilder
@synthesize resultUint64Value;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUint64Value = [[UInt64Value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUint64Value;
}
- (UInt64ValueBuilder*) clear {
  self.resultUint64Value = [[UInt64Value alloc] init];
  return self;
}
- (UInt64ValueBuilder*) clone {
  return [UInt64Value builderWithPrototype:resultUint64Value];
}
- (UInt64Value*) defaultInstance {
  return [UInt64Value defaultInstance];
}
- (UInt64Value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UInt64Value*) buildPartial {
  UInt64Value* returnMe = resultUint64Value;
  self.resultUint64Value = nil;
  return returnMe;
}
- (UInt64ValueBuilder*) mergeFrom:(UInt64Value*) other {
  if (other == [UInt64Value defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UInt64ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UInt64ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValue:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultUint64Value.hasValue;
}
- (UInt64) value {
  return resultUint64Value.value;
}
- (UInt64ValueBuilder*) setValue:(UInt64) value {
  resultUint64Value.hasValue = YES;
  resultUint64Value.value = value;
  return self;
}
- (UInt64ValueBuilder*) clearValue {
  resultUint64Value.hasValue = NO;
  resultUint64Value.value = 0L;
  return self;
}
@end

@interface Int32Value ()
@property SInt32 value;
@end

@implementation Int32Value

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0;
  }
  return self;
}
static Int32Value* defaultInt32ValueInstance = nil;
+ (void) initialize {
  if (self == [Int32Value class]) {
    defaultInt32ValueInstance = [[Int32Value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultInt32ValueInstance;
}
- (instancetype) defaultInstance {
  return defaultInt32ValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeInt32:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeInt32Size(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Int32Value*) parseFromData:(NSData*) data {
  return (Int32Value*)[[[Int32Value builder] mergeFromData:data] build];
}
+ (Int32Value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Value*)[[[Int32Value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Int32Value*) parseFromInputStream:(NSInputStream*) input {
  return (Int32Value*)[[[Int32Value builder] mergeFromInputStream:input] build];
}
+ (Int32Value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Value*)[[[Int32Value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int32Value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Int32Value*)[[[Int32Value builder] mergeFromCodedInputStream:input] build];
}
+ (Int32Value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int32Value*)[[[Int32Value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int32ValueBuilder*) builder {
  return [[Int32ValueBuilder alloc] init];
}
+ (Int32ValueBuilder*) builderWithPrototype:(Int32Value*) prototype {
  return [[Int32Value builder] mergeFrom:prototype];
}
- (Int32ValueBuilder*) builder {
  return [Int32Value builder];
}
- (Int32ValueBuilder*) toBuilder {
  return [Int32Value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithInteger:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Int32Value class]]) {
    return NO;
  }
  Int32Value *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Int32ValueBuilder()
@property (strong) Int32Value* resultInt32Value;
@end

@implementation Int32ValueBuilder
@synthesize resultInt32Value;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultInt32Value = [[Int32Value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultInt32Value;
}
- (Int32ValueBuilder*) clear {
  self.resultInt32Value = [[Int32Value alloc] init];
  return self;
}
- (Int32ValueBuilder*) clone {
  return [Int32Value builderWithPrototype:resultInt32Value];
}
- (Int32Value*) defaultInstance {
  return [Int32Value defaultInstance];
}
- (Int32Value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Int32Value*) buildPartial {
  Int32Value* returnMe = resultInt32Value;
  self.resultInt32Value = nil;
  return returnMe;
}
- (Int32ValueBuilder*) mergeFrom:(Int32Value*) other {
  if (other == [Int32Value defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Int32ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Int32ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultInt32Value.hasValue;
}
- (SInt32) value {
  return resultInt32Value.value;
}
- (Int32ValueBuilder*) setValue:(SInt32) value {
  resultInt32Value.hasValue = YES;
  resultInt32Value.value = value;
  return self;
}
- (Int32ValueBuilder*) clearValue {
  resultInt32Value.hasValue = NO;
  resultInt32Value.value = 0;
  return self;
}
@end

@interface UInt32Value ()
@property UInt32 value;
@end

@implementation UInt32Value

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = 0;
  }
  return self;
}
static UInt32Value* defaultUInt32ValueInstance = nil;
+ (void) initialize {
  if (self == [UInt32Value class]) {
    defaultUInt32ValueInstance = [[UInt32Value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUInt32ValueInstance;
}
- (instancetype) defaultInstance {
  return defaultUInt32ValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeUInt32:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeUInt32Size(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UInt32Value*) parseFromData:(NSData*) data {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromData:data] build];
}
+ (UInt32Value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UInt32Value*) parseFromInputStream:(NSInputStream*) input {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromInputStream:input] build];
}
+ (UInt32Value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UInt32Value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromCodedInputStream:input] build];
}
+ (UInt32Value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UInt32Value*)[[[UInt32Value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UInt32ValueBuilder*) builder {
  return [[UInt32ValueBuilder alloc] init];
}
+ (UInt32ValueBuilder*) builderWithPrototype:(UInt32Value*) prototype {
  return [[UInt32Value builder] mergeFrom:prototype];
}
- (UInt32ValueBuilder*) builder {
  return [UInt32Value builder];
}
- (UInt32ValueBuilder*) toBuilder {
  return [UInt32Value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInteger:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithInteger:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UInt32Value class]]) {
    return NO;
  }
  UInt32Value *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UInt32ValueBuilder()
@property (strong) UInt32Value* resultUint32Value;
@end

@implementation UInt32ValueBuilder
@synthesize resultUint32Value;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUint32Value = [[UInt32Value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUint32Value;
}
- (UInt32ValueBuilder*) clear {
  self.resultUint32Value = [[UInt32Value alloc] init];
  return self;
}
- (UInt32ValueBuilder*) clone {
  return [UInt32Value builderWithPrototype:resultUint32Value];
}
- (UInt32Value*) defaultInstance {
  return [UInt32Value defaultInstance];
}
- (UInt32Value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UInt32Value*) buildPartial {
  UInt32Value* returnMe = resultUint32Value;
  self.resultUint32Value = nil;
  return returnMe;
}
- (UInt32ValueBuilder*) mergeFrom:(UInt32Value*) other {
  if (other == [UInt32Value defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UInt32ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UInt32ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValue:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultUint32Value.hasValue;
}
- (UInt32) value {
  return resultUint32Value.value;
}
- (UInt32ValueBuilder*) setValue:(UInt32) value {
  resultUint32Value.hasValue = YES;
  resultUint32Value.value = value;
  return self;
}
- (UInt32ValueBuilder*) clearValue {
  resultUint32Value.hasValue = NO;
  resultUint32Value.value = 0;
  return self;
}
@end

@interface BoolValue ()
@property BOOL value;
@end

@implementation BoolValue

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
- (BOOL) value {
  return !!value_;
}
- (void) setValue:(BOOL) _value_ {
  value_ = !!_value_;
}
- (instancetype) init {
  if ((self = [super init])) {
    self.value = NO;
  }
  return self;
}
static BoolValue* defaultBoolValueInstance = nil;
+ (void) initialize {
  if (self == [BoolValue class]) {
    defaultBoolValueInstance = [[BoolValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBoolValueInstance;
}
- (instancetype) defaultInstance {
  return defaultBoolValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeBool:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeBoolSize(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BoolValue*) parseFromData:(NSData*) data {
  return (BoolValue*)[[[BoolValue builder] mergeFromData:data] build];
}
+ (BoolValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolValue*)[[[BoolValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BoolValue*) parseFromInputStream:(NSInputStream*) input {
  return (BoolValue*)[[[BoolValue builder] mergeFromInputStream:input] build];
}
+ (BoolValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolValue*)[[[BoolValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoolValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BoolValue*)[[[BoolValue builder] mergeFromCodedInputStream:input] build];
}
+ (BoolValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoolValue*)[[[BoolValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoolValueBuilder*) builder {
  return [[BoolValueBuilder alloc] init];
}
+ (BoolValueBuilder*) builderWithPrototype:(BoolValue*) prototype {
  return [[BoolValue builder] mergeFrom:prototype];
}
- (BoolValueBuilder*) builder {
  return [BoolValue builder];
}
- (BoolValueBuilder*) toBuilder {
  return [BoolValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithBool:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: [NSNumber numberWithBool:self.value] forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BoolValue class]]) {
    return NO;
  }
  BoolValue *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BoolValueBuilder()
@property (strong) BoolValue* resultBoolValue;
@end

@implementation BoolValueBuilder
@synthesize resultBoolValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBoolValue = [[BoolValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBoolValue;
}
- (BoolValueBuilder*) clear {
  self.resultBoolValue = [[BoolValue alloc] init];
  return self;
}
- (BoolValueBuilder*) clone {
  return [BoolValue builderWithPrototype:resultBoolValue];
}
- (BoolValue*) defaultInstance {
  return [BoolValue defaultInstance];
}
- (BoolValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BoolValue*) buildPartial {
  BoolValue* returnMe = resultBoolValue;
  self.resultBoolValue = nil;
  return returnMe;
}
- (BoolValueBuilder*) mergeFrom:(BoolValue*) other {
  if (other == [BoolValue defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BoolValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BoolValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setValue:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultBoolValue.hasValue;
}
- (BOOL) value {
  return resultBoolValue.value;
}
- (BoolValueBuilder*) setValue:(BOOL) value {
  resultBoolValue.hasValue = YES;
  resultBoolValue.value = value;
  return self;
}
- (BoolValueBuilder*) clearValue {
  resultBoolValue.hasValue = NO;
  resultBoolValue.value = NO;
  return self;
}
@end

@interface StringValue ()
@property (strong) NSString* value;
@end

@implementation StringValue

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = @"";
  }
  return self;
}
static StringValue* defaultStringValueInstance = nil;
+ (void) initialize {
  if (self == [StringValue class]) {
    defaultStringValueInstance = [[StringValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStringValueInstance;
}
- (instancetype) defaultInstance {
  return defaultStringValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeString:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeStringSize(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StringValue*) parseFromData:(NSData*) data {
  return (StringValue*)[[[StringValue builder] mergeFromData:data] build];
}
+ (StringValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringValue*)[[[StringValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StringValue*) parseFromInputStream:(NSInputStream*) input {
  return (StringValue*)[[[StringValue builder] mergeFromInputStream:input] build];
}
+ (StringValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringValue*)[[[StringValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StringValue*)[[[StringValue builder] mergeFromCodedInputStream:input] build];
}
+ (StringValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StringValue*)[[[StringValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StringValueBuilder*) builder {
  return [[StringValueBuilder alloc] init];
}
+ (StringValueBuilder*) builderWithPrototype:(StringValue*) prototype {
  return [[StringValue builder] mergeFrom:prototype];
}
- (StringValueBuilder*) builder {
  return [StringValue builder];
}
- (StringValueBuilder*) toBuilder {
  return [StringValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StringValue class]]) {
    return NO;
  }
  StringValue *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StringValueBuilder()
@property (strong) StringValue* resultStringValue;
@end

@implementation StringValueBuilder
@synthesize resultStringValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStringValue = [[StringValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStringValue;
}
- (StringValueBuilder*) clear {
  self.resultStringValue = [[StringValue alloc] init];
  return self;
}
- (StringValueBuilder*) clone {
  return [StringValue builderWithPrototype:resultStringValue];
}
- (StringValue*) defaultInstance {
  return [StringValue defaultInstance];
}
- (StringValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StringValue*) buildPartial {
  StringValue* returnMe = resultStringValue;
  self.resultStringValue = nil;
  return returnMe;
}
- (StringValueBuilder*) mergeFrom:(StringValue*) other {
  if (other == [StringValue defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StringValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StringValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultStringValue.hasValue;
}
- (NSString*) value {
  return resultStringValue.value;
}
- (StringValueBuilder*) setValue:(NSString*) value {
  resultStringValue.hasValue = YES;
  resultStringValue.value = value;
  return self;
}
- (StringValueBuilder*) clearValue {
  resultStringValue.hasValue = NO;
  resultStringValue.value = @"";
  return self;
}
@end

@interface BytesValue ()
@property (strong) NSData* value;
@end

@implementation BytesValue

- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.value = [NSData data];
  }
  return self;
}
static BytesValue* defaultBytesValueInstance = nil;
+ (void) initialize {
  if (self == [BytesValue class]) {
    defaultBytesValueInstance = [[BytesValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBytesValueInstance;
}
- (instancetype) defaultInstance {
  return defaultBytesValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasValue) {
    [output writeData:1 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasValue) {
    size_ += computeDataSize(1, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BytesValue*) parseFromData:(NSData*) data {
  return (BytesValue*)[[[BytesValue builder] mergeFromData:data] build];
}
+ (BytesValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BytesValue*)[[[BytesValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BytesValue*) parseFromInputStream:(NSInputStream*) input {
  return (BytesValue*)[[[BytesValue builder] mergeFromInputStream:input] build];
}
+ (BytesValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BytesValue*)[[[BytesValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BytesValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BytesValue*)[[[BytesValue builder] mergeFromCodedInputStream:input] build];
}
+ (BytesValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BytesValue*)[[[BytesValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BytesValueBuilder*) builder {
  return [[BytesValueBuilder alloc] init];
}
+ (BytesValueBuilder*) builderWithPrototype:(BytesValue*) prototype {
  return [[BytesValue builder] mergeFrom:prototype];
}
- (BytesValueBuilder*) builder {
  return [BytesValue builder];
}
- (BytesValueBuilder*) toBuilder {
  return [BytesValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BytesValue class]]) {
    return NO;
  }
  BytesValue *otherMessage = other;
  return
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BytesValueBuilder()
@property (strong) BytesValue* resultBytesValue;
@end

@implementation BytesValueBuilder
@synthesize resultBytesValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBytesValue = [[BytesValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBytesValue;
}
- (BytesValueBuilder*) clear {
  self.resultBytesValue = [[BytesValue alloc] init];
  return self;
}
- (BytesValueBuilder*) clone {
  return [BytesValue builderWithPrototype:resultBytesValue];
}
- (BytesValue*) defaultInstance {
  return [BytesValue defaultInstance];
}
- (BytesValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BytesValue*) buildPartial {
  BytesValue* returnMe = resultBytesValue;
  self.resultBytesValue = nil;
  return returnMe;
}
- (BytesValueBuilder*) mergeFrom:(BytesValue*) other {
  if (other == [BytesValue defaultInstance]) {
    return self;
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BytesValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BytesValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setValue:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasValue {
  return resultBytesValue.hasValue;
}
- (NSData*) value {
  return resultBytesValue.value;
}
- (BytesValueBuilder*) setValue:(NSData*) value {
  resultBytesValue.hasValue = YES;
  resultBytesValue.value = value;
  return self;
}
- (BytesValueBuilder*) clearValue {
  resultBytesValue.hasValue = NO;
  resultBytesValue.value = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
