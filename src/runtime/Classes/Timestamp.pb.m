// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Timestamp.pb.h"
// @@protoc_insertion_point(imports)

@implementation TimestampRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TimestampRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Timestamp ()
@property SInt64 seconds;
@property SInt32 nanos;
@end

@implementation Timestamp

- (BOOL) hasSeconds {
  return !!hasSeconds_;
}
- (void) setHasSeconds:(BOOL) _value_ {
  hasSeconds_ = !!_value_;
}
@synthesize seconds;
- (BOOL) hasNanos {
  return !!hasNanos_;
}
- (void) setHasNanos:(BOOL) _value_ {
  hasNanos_ = !!_value_;
}
@synthesize nanos;
- (instancetype) init {
  if ((self = [super init])) {
    self.seconds = 0L;
    self.nanos = 0;
  }
  return self;
}
static Timestamp* defaultTimestampInstance = nil;
+ (void) initialize {
  if (self == [Timestamp class]) {
    defaultTimestampInstance = [[Timestamp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTimestampInstance;
}
- (instancetype) defaultInstance {
  return defaultTimestampInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeconds) {
    [output writeInt64:1 value:self.seconds];
  }
  if (self.hasNanos) {
    [output writeInt32:2 value:self.nanos];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeconds) {
    size_ += computeInt64Size(1, self.seconds);
  }
  if (self.hasNanos) {
    size_ += computeInt32Size(2, self.nanos);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Timestamp*) parseFromData:(NSData*) data {
  return (Timestamp*)[[[Timestamp builder] mergeFromData:data] build];
}
+ (Timestamp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Timestamp*)[[[Timestamp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Timestamp*) parseFromInputStream:(NSInputStream*) input {
  return (Timestamp*)[[[Timestamp builder] mergeFromInputStream:input] build];
}
+ (Timestamp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Timestamp*)[[[Timestamp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Timestamp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Timestamp*)[[[Timestamp builder] mergeFromCodedInputStream:input] build];
}
+ (Timestamp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Timestamp*)[[[Timestamp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TimestampBuilder*) builder {
  return [[TimestampBuilder alloc] init];
}
+ (TimestampBuilder*) builderWithPrototype:(Timestamp*) prototype {
  return [[Timestamp builder] mergeFrom:prototype];
}
- (TimestampBuilder*) builder {
  return [Timestamp builder];
}
- (TimestampBuilder*) toBuilder {
  return [Timestamp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeconds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seconds", [NSNumber numberWithLongLong:self.seconds]];
  }
  if (self.hasNanos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nanos", [NSNumber numberWithInteger:self.nanos]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeconds) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.seconds] forKey: @"seconds"];
  }
  if (self.hasNanos) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nanos] forKey: @"nanos"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Timestamp class]]) {
    return NO;
  }
  Timestamp *otherMessage = other;
  return
      self.hasSeconds == otherMessage.hasSeconds &&
      (!self.hasSeconds || self.seconds == otherMessage.seconds) &&
      self.hasNanos == otherMessage.hasNanos &&
      (!self.hasNanos || self.nanos == otherMessage.nanos) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeconds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.seconds] hash];
  }
  if (self.hasNanos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nanos] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TimestampBuilder()
@property (strong) Timestamp* resultTimestamp;
@end

@implementation TimestampBuilder
@synthesize resultTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTimestamp = [[Timestamp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTimestamp;
}
- (TimestampBuilder*) clear {
  self.resultTimestamp = [[Timestamp alloc] init];
  return self;
}
- (TimestampBuilder*) clone {
  return [Timestamp builderWithPrototype:resultTimestamp];
}
- (Timestamp*) defaultInstance {
  return [Timestamp defaultInstance];
}
- (Timestamp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Timestamp*) buildPartial {
  Timestamp* returnMe = resultTimestamp;
  self.resultTimestamp = nil;
  return returnMe;
}
- (TimestampBuilder*) mergeFrom:(Timestamp*) other {
  if (other == [Timestamp defaultInstance]) {
    return self;
  }
  if (other.hasSeconds) {
    [self setSeconds:other.seconds];
  }
  if (other.hasNanos) {
    [self setNanos:other.nanos];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TimestampBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TimestampBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeconds:[input readInt64]];
        break;
      }
      case 16: {
        [self setNanos:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeconds {
  return resultTimestamp.hasSeconds;
}
- (SInt64) seconds {
  return resultTimestamp.seconds;
}
- (TimestampBuilder*) setSeconds:(SInt64) value {
  resultTimestamp.hasSeconds = YES;
  resultTimestamp.seconds = value;
  return self;
}
- (TimestampBuilder*) clearSeconds {
  resultTimestamp.hasSeconds = NO;
  resultTimestamp.seconds = 0L;
  return self;
}
- (BOOL) hasNanos {
  return resultTimestamp.hasNanos;
}
- (SInt32) nanos {
  return resultTimestamp.nanos;
}
- (TimestampBuilder*) setNanos:(SInt32) value {
  resultTimestamp.hasNanos = YES;
  resultTimestamp.nanos = value;
  return self;
}
- (TimestampBuilder*) clearNanos {
  resultTimestamp.hasNanos = NO;
  resultTimestamp.nanos = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
