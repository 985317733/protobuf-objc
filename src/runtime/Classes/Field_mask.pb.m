// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Field_mask.pb.h"
// @@protoc_insertion_point(imports)

@implementation FieldMaskRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FieldMaskRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FieldMask ()
@property (strong) NSMutableArray * pathsArray;
@end

@implementation FieldMask

@synthesize pathsArray;
@dynamic paths;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static FieldMask* defaultFieldMaskInstance = nil;
+ (void) initialize {
  if (self == [FieldMask class]) {
    defaultFieldMaskInstance = [[FieldMask alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFieldMaskInstance;
}
- (instancetype) defaultInstance {
  return defaultFieldMaskInstance;
}
- (NSArray *)paths {
  return pathsArray;
}
- (NSString*)pathsAtIndex:(NSUInteger)index {
  return [pathsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.pathsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.pathsArray.count;
    [self.pathsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FieldMask*) parseFromData:(NSData*) data {
  return (FieldMask*)[[[FieldMask builder] mergeFromData:data] build];
}
+ (FieldMask*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FieldMask*)[[[FieldMask builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FieldMask*) parseFromInputStream:(NSInputStream*) input {
  return (FieldMask*)[[[FieldMask builder] mergeFromInputStream:input] build];
}
+ (FieldMask*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FieldMask*)[[[FieldMask builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FieldMask*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FieldMask*)[[[FieldMask builder] mergeFromCodedInputStream:input] build];
}
+ (FieldMask*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FieldMask*)[[[FieldMask builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FieldMaskBuilder*) builder {
  return [[FieldMaskBuilder alloc] init];
}
+ (FieldMaskBuilder*) builderWithPrototype:(FieldMask*) prototype {
  return [[FieldMask builder] mergeFrom:prototype];
}
- (FieldMaskBuilder*) builder {
  return [FieldMask builder];
}
- (FieldMaskBuilder*) toBuilder {
  return [FieldMask builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.pathsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"paths", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.paths forKey: @"paths"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FieldMask class]]) {
    return NO;
  }
  FieldMask *otherMessage = other;
  return
      [self.pathsArray isEqualToArray:otherMessage.pathsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.pathsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FieldMaskBuilder()
@property (strong) FieldMask* resultFieldMask;
@end

@implementation FieldMaskBuilder
@synthesize resultFieldMask;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFieldMask = [[FieldMask alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFieldMask;
}
- (FieldMaskBuilder*) clear {
  self.resultFieldMask = [[FieldMask alloc] init];
  return self;
}
- (FieldMaskBuilder*) clone {
  return [FieldMask builderWithPrototype:resultFieldMask];
}
- (FieldMask*) defaultInstance {
  return [FieldMask defaultInstance];
}
- (FieldMask*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FieldMask*) buildPartial {
  FieldMask* returnMe = resultFieldMask;
  self.resultFieldMask = nil;
  return returnMe;
}
- (FieldMaskBuilder*) mergeFrom:(FieldMask*) other {
  if (other == [FieldMask defaultInstance]) {
    return self;
  }
  if (other.pathsArray.count > 0) {
    if (resultFieldMask.pathsArray == nil) {
      resultFieldMask.pathsArray = [[NSMutableArray alloc] initWithArray:other.pathsArray];
    } else {
      [resultFieldMask.pathsArray addObjectsFromArray:other.pathsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FieldMaskBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FieldMaskBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addPaths:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)paths {
  return resultFieldMask.pathsArray;
}
- (NSString*)pathsAtIndex:(NSUInteger)index {
  return [resultFieldMask pathsAtIndex:index];
}
- (FieldMaskBuilder *)addPaths:(NSString*)value {
  if (resultFieldMask.pathsArray == nil) {
    resultFieldMask.pathsArray = [[NSMutableArray alloc]init];
  }
  [resultFieldMask.pathsArray addObject:value];
  return self;
}
- (FieldMaskBuilder *)setPathsArray:(NSArray *)array {
  resultFieldMask.pathsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (FieldMaskBuilder *)clearPaths {
  resultFieldMask.pathsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
