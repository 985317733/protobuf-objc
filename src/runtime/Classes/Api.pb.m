// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Api.pb.h"
// @@protoc_insertion_point(imports)

@implementation ApiRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ApiRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SourceContextRoot registerAllExtensions:registry];
    [TypeRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Api ()
@property (strong) NSString* name;
@property (strong) NSMutableArray<Method*> * methodsArray;
@property (strong) NSMutableArray<Option*> * optionsArray;
@property (strong) NSString* version;
@property (strong) SourceContext* sourceContext;
@property (strong) NSMutableArray<Mixin*> * mixinsArray;
@property Syntax syntax;
@end

@implementation Api

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize methodsArray;
@dynamic methods;
@synthesize optionsArray;
@dynamic options;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasSourceContext {
  return !!hasSourceContext_;
}
- (void) setHasSourceContext:(BOOL) _value_ {
  hasSourceContext_ = !!_value_;
}
@synthesize sourceContext;
@synthesize mixinsArray;
@dynamic mixins;
- (BOOL) hasSyntax {
  return !!hasSyntax_;
}
- (void) setHasSyntax:(BOOL) _value_ {
  hasSyntax_ = !!_value_;
}
@synthesize syntax;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.version = @"";
    self.sourceContext = [SourceContext defaultInstance];
    self.syntax = SyntaxSyntaxProto2;
  }
  return self;
}
static Api* defaultApiInstance = nil;
+ (void) initialize {
  if (self == [Api class]) {
    defaultApiInstance = [[Api alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultApiInstance;
}
- (instancetype) defaultInstance {
  return defaultApiInstance;
}
- (NSArray<Method*> *)methods {
  return methodsArray;
}
- (Method*)methodsAtIndex:(NSUInteger)index {
  return [methodsArray objectAtIndex:index];
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (NSArray<Mixin*> *)mixins {
  return mixinsArray;
}
- (Mixin*)mixinsAtIndex:(NSUInteger)index {
  return [mixinsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self.methodsArray enumerateObjectsUsingBlock:^(Method *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasVersion) {
    [output writeString:4 value:self.version];
  }
  if (self.hasSourceContext) {
    [output writeMessage:5 value:self.sourceContext];
  }
  [self.mixinsArray enumerateObjectsUsingBlock:^(Mixin *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasSyntax) {
    [output writeEnum:7 value:self.syntax];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  [self.methodsArray enumerateObjectsUsingBlock:^(Method *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasVersion) {
    size_ += computeStringSize(4, self.version);
  }
  if (self.hasSourceContext) {
    size_ += computeMessageSize(5, self.sourceContext);
  }
  [self.mixinsArray enumerateObjectsUsingBlock:^(Mixin *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasSyntax) {
    size_ += computeEnumSize(7, self.syntax);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Api*) parseFromData:(NSData*) data {
  return (Api*)[[[Api builder] mergeFromData:data] build];
}
+ (Api*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Api*)[[[Api builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Api*) parseFromInputStream:(NSInputStream*) input {
  return (Api*)[[[Api builder] mergeFromInputStream:input] build];
}
+ (Api*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Api*)[[[Api builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Api*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Api*)[[[Api builder] mergeFromCodedInputStream:input] build];
}
+ (Api*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Api*)[[[Api builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ApiBuilder*) builder {
  return [[ApiBuilder alloc] init];
}
+ (ApiBuilder*) builderWithPrototype:(Api*) prototype {
  return [[Api builder] mergeFrom:prototype];
}
- (ApiBuilder*) builder {
  return [Api builder];
}
- (ApiBuilder*) toBuilder {
  return [Api builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.methodsArray enumerateObjectsUsingBlock:^(Method *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"methods"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", self.version];
  }
  if (self.hasSourceContext) {
    [output appendFormat:@"%@%@ {\n", indent, @"sourceContext"];
    [self.sourceContext writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.mixinsArray enumerateObjectsUsingBlock:^(Mixin *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"mixins"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSyntax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syntax", NSStringFromSyntax(self.syntax)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  for (Method* element in self.methodsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"methods"];
  }
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  if (self.hasVersion) {
    [dictionary setObject: self.version forKey: @"version"];
  }
  if (self.hasSourceContext) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sourceContext storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sourceContext"];
  }
  for (Mixin* element in self.mixinsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"mixins"];
  }
  if (self.hasSyntax) {
    [dictionary setObject: @(self.syntax) forKey: @"syntax"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Api class]]) {
    return NO;
  }
  Api *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.methodsArray isEqualToArray:otherMessage.methodsArray] &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasSourceContext == otherMessage.hasSourceContext &&
      (!self.hasSourceContext || [self.sourceContext isEqual:otherMessage.sourceContext]) &&
      [self.mixinsArray isEqualToArray:otherMessage.mixinsArray] &&
      self.hasSyntax == otherMessage.hasSyntax &&
      (!self.hasSyntax || self.syntax == otherMessage.syntax) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.methodsArray enumerateObjectsUsingBlock:^(Method *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasSourceContext) {
    hashCode = hashCode * 31 + [self.sourceContext hash];
  }
  [self.mixinsArray enumerateObjectsUsingBlock:^(Mixin *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSyntax) {
    hashCode = hashCode * 31 + self.syntax;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ApiBuilder()
@property (strong) Api* resultApi;
@end

@implementation ApiBuilder
@synthesize resultApi;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultApi = [[Api alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultApi;
}
- (ApiBuilder*) clear {
  self.resultApi = [[Api alloc] init];
  return self;
}
- (ApiBuilder*) clone {
  return [Api builderWithPrototype:resultApi];
}
- (Api*) defaultInstance {
  return [Api defaultInstance];
}
- (Api*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Api*) buildPartial {
  Api* returnMe = resultApi;
  self.resultApi = nil;
  return returnMe;
}
- (ApiBuilder*) mergeFrom:(Api*) other {
  if (other == [Api defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.methodsArray.count > 0) {
    if (resultApi.methodsArray == nil) {
      resultApi.methodsArray = [[NSMutableArray alloc] initWithArray:other.methodsArray];
    } else {
      [resultApi.methodsArray addObjectsFromArray:other.methodsArray];
    }
  }
  if (other.optionsArray.count > 0) {
    if (resultApi.optionsArray == nil) {
      resultApi.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultApi.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasSourceContext) {
    [self mergeSourceContext:other.sourceContext];
  }
  if (other.mixinsArray.count > 0) {
    if (resultApi.mixinsArray == nil) {
      resultApi.mixinsArray = [[NSMutableArray alloc] initWithArray:other.mixinsArray];
    } else {
      [resultApi.mixinsArray addObjectsFromArray:other.mixinsArray];
    }
  }
  if (other.hasSyntax) {
    [self setSyntax:other.syntax];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ApiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ApiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        MethodBuilder* subBuilder = [Method builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMethods:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setVersion:[input readString]];
        break;
      }
      case 42: {
        SourceContextBuilder* subBuilder = [SourceContext builder];
        if (self.hasSourceContext) {
          [subBuilder mergeFrom:self.sourceContext];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSourceContext:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MixinBuilder* subBuilder = [Mixin builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMixins:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        Syntax value = (Syntax)[input readEnum];
        if (SyntaxIsValidValue(value)) {
          [self setSyntax:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultApi.hasName;
}
- (NSString*) name {
  return resultApi.name;
}
- (ApiBuilder*) setName:(NSString*) value {
  resultApi.hasName = YES;
  resultApi.name = value;
  return self;
}
- (ApiBuilder*) clearName {
  resultApi.hasName = NO;
  resultApi.name = @"";
  return self;
}
- (NSMutableArray<Method*> *)methods {
  return resultApi.methodsArray;
}
- (Method*)methodsAtIndex:(NSUInteger)index {
  return [resultApi methodsAtIndex:index];
}
- (ApiBuilder *)addMethods:(Method*)value {
  if (resultApi.methodsArray == nil) {
    resultApi.methodsArray = [[NSMutableArray alloc]init];
  }
  [resultApi.methodsArray addObject:value];
  return self;
}
- (ApiBuilder *)setMethodsArray:(NSArray<Method*> *)array {
  resultApi.methodsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ApiBuilder *)clearMethods {
  resultApi.methodsArray = nil;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultApi.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultApi optionsAtIndex:index];
}
- (ApiBuilder *)addOptions:(Option*)value {
  if (resultApi.optionsArray == nil) {
    resultApi.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultApi.optionsArray addObject:value];
  return self;
}
- (ApiBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultApi.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ApiBuilder *)clearOptions {
  resultApi.optionsArray = nil;
  return self;
}
- (BOOL) hasVersion {
  return resultApi.hasVersion;
}
- (NSString*) version {
  return resultApi.version;
}
- (ApiBuilder*) setVersion:(NSString*) value {
  resultApi.hasVersion = YES;
  resultApi.version = value;
  return self;
}
- (ApiBuilder*) clearVersion {
  resultApi.hasVersion = NO;
  resultApi.version = @"";
  return self;
}
- (BOOL) hasSourceContext {
  return resultApi.hasSourceContext;
}
- (SourceContext*) sourceContext {
  return resultApi.sourceContext;
}
- (ApiBuilder*) setSourceContext:(SourceContext*) value {
  resultApi.hasSourceContext = YES;
  resultApi.sourceContext = value;
  return self;
}
- (ApiBuilder*) setSourceContextBuilder:(SourceContextBuilder*) builderForValue {
  return [self setSourceContext:[builderForValue build]];
}
- (ApiBuilder*) mergeSourceContext:(SourceContext*) value {
  if (resultApi.hasSourceContext &&
      resultApi.sourceContext != [SourceContext defaultInstance]) {
    resultApi.sourceContext =
      [[[SourceContext builderWithPrototype:resultApi.sourceContext] mergeFrom:value] buildPartial];
  } else {
    resultApi.sourceContext = value;
  }
  resultApi.hasSourceContext = YES;
  return self;
}
- (ApiBuilder*) clearSourceContext {
  resultApi.hasSourceContext = NO;
  resultApi.sourceContext = [SourceContext defaultInstance];
  return self;
}
- (NSMutableArray<Mixin*> *)mixins {
  return resultApi.mixinsArray;
}
- (Mixin*)mixinsAtIndex:(NSUInteger)index {
  return [resultApi mixinsAtIndex:index];
}
- (ApiBuilder *)addMixins:(Mixin*)value {
  if (resultApi.mixinsArray == nil) {
    resultApi.mixinsArray = [[NSMutableArray alloc]init];
  }
  [resultApi.mixinsArray addObject:value];
  return self;
}
- (ApiBuilder *)setMixinsArray:(NSArray<Mixin*> *)array {
  resultApi.mixinsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ApiBuilder *)clearMixins {
  resultApi.mixinsArray = nil;
  return self;
}
- (BOOL) hasSyntax {
  return resultApi.hasSyntax;
}
- (Syntax) syntax {
  return resultApi.syntax;
}
- (ApiBuilder*) setSyntax:(Syntax) value {
  resultApi.hasSyntax = YES;
  resultApi.syntax = value;
  return self;
}
- (ApiBuilder*) clearSyntax {
  resultApi.hasSyntax = NO;
  resultApi.syntax = SyntaxSyntaxProto2;
  return self;
}
@end

@interface Method ()
@property (strong) NSString* name;
@property (strong) NSString* requestTypeUrl;
@property BOOL requestStreaming;
@property (strong) NSString* responseTypeUrl;
@property BOOL responseStreaming;
@property (strong) NSMutableArray<Option*> * optionsArray;
@property Syntax syntax;
@end

@implementation Method

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasRequestTypeUrl {
  return !!hasRequestTypeUrl_;
}
- (void) setHasRequestTypeUrl:(BOOL) _value_ {
  hasRequestTypeUrl_ = !!_value_;
}
@synthesize requestTypeUrl;
- (BOOL) hasRequestStreaming {
  return !!hasRequestStreaming_;
}
- (void) setHasRequestStreaming:(BOOL) _value_ {
  hasRequestStreaming_ = !!_value_;
}
- (BOOL) requestStreaming {
  return !!requestStreaming_;
}
- (void) setRequestStreaming:(BOOL) _value_ {
  requestStreaming_ = !!_value_;
}
- (BOOL) hasResponseTypeUrl {
  return !!hasResponseTypeUrl_;
}
- (void) setHasResponseTypeUrl:(BOOL) _value_ {
  hasResponseTypeUrl_ = !!_value_;
}
@synthesize responseTypeUrl;
- (BOOL) hasResponseStreaming {
  return !!hasResponseStreaming_;
}
- (void) setHasResponseStreaming:(BOOL) _value_ {
  hasResponseStreaming_ = !!_value_;
}
- (BOOL) responseStreaming {
  return !!responseStreaming_;
}
- (void) setResponseStreaming:(BOOL) _value_ {
  responseStreaming_ = !!_value_;
}
@synthesize optionsArray;
@dynamic options;
- (BOOL) hasSyntax {
  return !!hasSyntax_;
}
- (void) setHasSyntax:(BOOL) _value_ {
  hasSyntax_ = !!_value_;
}
@synthesize syntax;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.requestTypeUrl = @"";
    self.requestStreaming = NO;
    self.responseTypeUrl = @"";
    self.responseStreaming = NO;
    self.syntax = SyntaxSyntaxProto2;
  }
  return self;
}
static Method* defaultMethodInstance = nil;
+ (void) initialize {
  if (self == [Method class]) {
    defaultMethodInstance = [[Method alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMethodInstance;
}
- (instancetype) defaultInstance {
  return defaultMethodInstance;
}
- (NSArray<Option*> *)options {
  return optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [optionsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasRequestTypeUrl) {
    [output writeString:2 value:self.requestTypeUrl];
  }
  if (self.hasRequestStreaming) {
    [output writeBool:3 value:self.requestStreaming];
  }
  if (self.hasResponseTypeUrl) {
    [output writeString:4 value:self.responseTypeUrl];
  }
  if (self.hasResponseStreaming) {
    [output writeBool:5 value:self.responseStreaming];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasSyntax) {
    [output writeEnum:7 value:self.syntax];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasRequestTypeUrl) {
    size_ += computeStringSize(2, self.requestTypeUrl);
  }
  if (self.hasRequestStreaming) {
    size_ += computeBoolSize(3, self.requestStreaming);
  }
  if (self.hasResponseTypeUrl) {
    size_ += computeStringSize(4, self.responseTypeUrl);
  }
  if (self.hasResponseStreaming) {
    size_ += computeBoolSize(5, self.responseStreaming);
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasSyntax) {
    size_ += computeEnumSize(7, self.syntax);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Method*) parseFromData:(NSData*) data {
  return (Method*)[[[Method builder] mergeFromData:data] build];
}
+ (Method*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Method*)[[[Method builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Method*) parseFromInputStream:(NSInputStream*) input {
  return (Method*)[[[Method builder] mergeFromInputStream:input] build];
}
+ (Method*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Method*)[[[Method builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Method*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Method*)[[[Method builder] mergeFromCodedInputStream:input] build];
}
+ (Method*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Method*)[[[Method builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MethodBuilder*) builder {
  return [[MethodBuilder alloc] init];
}
+ (MethodBuilder*) builderWithPrototype:(Method*) prototype {
  return [[Method builder] mergeFrom:prototype];
}
- (MethodBuilder*) builder {
  return [Method builder];
}
- (MethodBuilder*) toBuilder {
  return [Method builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasRequestTypeUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestTypeUrl", self.requestTypeUrl];
  }
  if (self.hasRequestStreaming) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestStreaming", [NSNumber numberWithBool:self.requestStreaming]];
  }
  if (self.hasResponseTypeUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseTypeUrl", self.responseTypeUrl];
  }
  if (self.hasResponseStreaming) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responseStreaming", [NSNumber numberWithBool:self.responseStreaming]];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"options"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSyntax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"syntax", NSStringFromSyntax(self.syntax)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasRequestTypeUrl) {
    [dictionary setObject: self.requestTypeUrl forKey: @"requestTypeUrl"];
  }
  if (self.hasRequestStreaming) {
    [dictionary setObject: [NSNumber numberWithBool:self.requestStreaming] forKey: @"requestStreaming"];
  }
  if (self.hasResponseTypeUrl) {
    [dictionary setObject: self.responseTypeUrl forKey: @"responseTypeUrl"];
  }
  if (self.hasResponseStreaming) {
    [dictionary setObject: [NSNumber numberWithBool:self.responseStreaming] forKey: @"responseStreaming"];
  }
  for (Option* element in self.optionsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"options"];
  }
  if (self.hasSyntax) {
    [dictionary setObject: @(self.syntax) forKey: @"syntax"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Method class]]) {
    return NO;
  }
  Method *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasRequestTypeUrl == otherMessage.hasRequestTypeUrl &&
      (!self.hasRequestTypeUrl || [self.requestTypeUrl isEqual:otherMessage.requestTypeUrl]) &&
      self.hasRequestStreaming == otherMessage.hasRequestStreaming &&
      (!self.hasRequestStreaming || self.requestStreaming == otherMessage.requestStreaming) &&
      self.hasResponseTypeUrl == otherMessage.hasResponseTypeUrl &&
      (!self.hasResponseTypeUrl || [self.responseTypeUrl isEqual:otherMessage.responseTypeUrl]) &&
      self.hasResponseStreaming == otherMessage.hasResponseStreaming &&
      (!self.hasResponseStreaming || self.responseStreaming == otherMessage.responseStreaming) &&
      [self.optionsArray isEqualToArray:otherMessage.optionsArray] &&
      self.hasSyntax == otherMessage.hasSyntax &&
      (!self.hasSyntax || self.syntax == otherMessage.syntax) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasRequestTypeUrl) {
    hashCode = hashCode * 31 + [self.requestTypeUrl hash];
  }
  if (self.hasRequestStreaming) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requestStreaming] hash];
  }
  if (self.hasResponseTypeUrl) {
    hashCode = hashCode * 31 + [self.responseTypeUrl hash];
  }
  if (self.hasResponseStreaming) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.responseStreaming] hash];
  }
  [self.optionsArray enumerateObjectsUsingBlock:^(Option *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSyntax) {
    hashCode = hashCode * 31 + self.syntax;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MethodBuilder()
@property (strong) Method* resultMethod;
@end

@implementation MethodBuilder
@synthesize resultMethod;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMethod = [[Method alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMethod;
}
- (MethodBuilder*) clear {
  self.resultMethod = [[Method alloc] init];
  return self;
}
- (MethodBuilder*) clone {
  return [Method builderWithPrototype:resultMethod];
}
- (Method*) defaultInstance {
  return [Method defaultInstance];
}
- (Method*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Method*) buildPartial {
  Method* returnMe = resultMethod;
  self.resultMethod = nil;
  return returnMe;
}
- (MethodBuilder*) mergeFrom:(Method*) other {
  if (other == [Method defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasRequestTypeUrl) {
    [self setRequestTypeUrl:other.requestTypeUrl];
  }
  if (other.hasRequestStreaming) {
    [self setRequestStreaming:other.requestStreaming];
  }
  if (other.hasResponseTypeUrl) {
    [self setResponseTypeUrl:other.responseTypeUrl];
  }
  if (other.hasResponseStreaming) {
    [self setResponseStreaming:other.responseStreaming];
  }
  if (other.optionsArray.count > 0) {
    if (resultMethod.optionsArray == nil) {
      resultMethod.optionsArray = [[NSMutableArray alloc] initWithArray:other.optionsArray];
    } else {
      [resultMethod.optionsArray addObjectsFromArray:other.optionsArray];
    }
  }
  if (other.hasSyntax) {
    [self setSyntax:other.syntax];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MethodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MethodBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setRequestTypeUrl:[input readString]];
        break;
      }
      case 24: {
        [self setRequestStreaming:[input readBool]];
        break;
      }
      case 34: {
        [self setResponseTypeUrl:[input readString]];
        break;
      }
      case 40: {
        [self setResponseStreaming:[input readBool]];
        break;
      }
      case 50: {
        OptionBuilder* subBuilder = [Option builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOptions:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        Syntax value = (Syntax)[input readEnum];
        if (SyntaxIsValidValue(value)) {
          [self setSyntax:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultMethod.hasName;
}
- (NSString*) name {
  return resultMethod.name;
}
- (MethodBuilder*) setName:(NSString*) value {
  resultMethod.hasName = YES;
  resultMethod.name = value;
  return self;
}
- (MethodBuilder*) clearName {
  resultMethod.hasName = NO;
  resultMethod.name = @"";
  return self;
}
- (BOOL) hasRequestTypeUrl {
  return resultMethod.hasRequestTypeUrl;
}
- (NSString*) requestTypeUrl {
  return resultMethod.requestTypeUrl;
}
- (MethodBuilder*) setRequestTypeUrl:(NSString*) value {
  resultMethod.hasRequestTypeUrl = YES;
  resultMethod.requestTypeUrl = value;
  return self;
}
- (MethodBuilder*) clearRequestTypeUrl {
  resultMethod.hasRequestTypeUrl = NO;
  resultMethod.requestTypeUrl = @"";
  return self;
}
- (BOOL) hasRequestStreaming {
  return resultMethod.hasRequestStreaming;
}
- (BOOL) requestStreaming {
  return resultMethod.requestStreaming;
}
- (MethodBuilder*) setRequestStreaming:(BOOL) value {
  resultMethod.hasRequestStreaming = YES;
  resultMethod.requestStreaming = value;
  return self;
}
- (MethodBuilder*) clearRequestStreaming {
  resultMethod.hasRequestStreaming = NO;
  resultMethod.requestStreaming = NO;
  return self;
}
- (BOOL) hasResponseTypeUrl {
  return resultMethod.hasResponseTypeUrl;
}
- (NSString*) responseTypeUrl {
  return resultMethod.responseTypeUrl;
}
- (MethodBuilder*) setResponseTypeUrl:(NSString*) value {
  resultMethod.hasResponseTypeUrl = YES;
  resultMethod.responseTypeUrl = value;
  return self;
}
- (MethodBuilder*) clearResponseTypeUrl {
  resultMethod.hasResponseTypeUrl = NO;
  resultMethod.responseTypeUrl = @"";
  return self;
}
- (BOOL) hasResponseStreaming {
  return resultMethod.hasResponseStreaming;
}
- (BOOL) responseStreaming {
  return resultMethod.responseStreaming;
}
- (MethodBuilder*) setResponseStreaming:(BOOL) value {
  resultMethod.hasResponseStreaming = YES;
  resultMethod.responseStreaming = value;
  return self;
}
- (MethodBuilder*) clearResponseStreaming {
  resultMethod.hasResponseStreaming = NO;
  resultMethod.responseStreaming = NO;
  return self;
}
- (NSMutableArray<Option*> *)options {
  return resultMethod.optionsArray;
}
- (Option*)optionsAtIndex:(NSUInteger)index {
  return [resultMethod optionsAtIndex:index];
}
- (MethodBuilder *)addOptions:(Option*)value {
  if (resultMethod.optionsArray == nil) {
    resultMethod.optionsArray = [[NSMutableArray alloc]init];
  }
  [resultMethod.optionsArray addObject:value];
  return self;
}
- (MethodBuilder *)setOptionsArray:(NSArray<Option*> *)array {
  resultMethod.optionsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MethodBuilder *)clearOptions {
  resultMethod.optionsArray = nil;
  return self;
}
- (BOOL) hasSyntax {
  return resultMethod.hasSyntax;
}
- (Syntax) syntax {
  return resultMethod.syntax;
}
- (MethodBuilder*) setSyntax:(Syntax) value {
  resultMethod.hasSyntax = YES;
  resultMethod.syntax = value;
  return self;
}
- (MethodBuilder*) clearSyntax {
  resultMethod.hasSyntax = NO;
  resultMethod.syntax = SyntaxSyntaxProto2;
  return self;
}
@end

@interface Mixin ()
@property (strong) NSString* name;
@property (strong) NSString* root;
@end

@implementation Mixin

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasRoot {
  return !!hasRoot_;
}
- (void) setHasRoot:(BOOL) _value_ {
  hasRoot_ = !!_value_;
}
@synthesize root;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.root = @"";
  }
  return self;
}
static Mixin* defaultMixinInstance = nil;
+ (void) initialize {
  if (self == [Mixin class]) {
    defaultMixinInstance = [[Mixin alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMixinInstance;
}
- (instancetype) defaultInstance {
  return defaultMixinInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasRoot) {
    [output writeString:2 value:self.root];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasRoot) {
    size_ += computeStringSize(2, self.root);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Mixin*) parseFromData:(NSData*) data {
  return (Mixin*)[[[Mixin builder] mergeFromData:data] build];
}
+ (Mixin*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mixin*)[[[Mixin builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Mixin*) parseFromInputStream:(NSInputStream*) input {
  return (Mixin*)[[[Mixin builder] mergeFromInputStream:input] build];
}
+ (Mixin*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mixin*)[[[Mixin builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Mixin*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Mixin*)[[[Mixin builder] mergeFromCodedInputStream:input] build];
}
+ (Mixin*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Mixin*)[[[Mixin builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MixinBuilder*) builder {
  return [[MixinBuilder alloc] init];
}
+ (MixinBuilder*) builderWithPrototype:(Mixin*) prototype {
  return [[Mixin builder] mergeFrom:prototype];
}
- (MixinBuilder*) builder {
  return [Mixin builder];
}
- (MixinBuilder*) toBuilder {
  return [Mixin builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasRoot) {
    [output appendFormat:@"%@%@: %@\n", indent, @"root", self.root];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasRoot) {
    [dictionary setObject: self.root forKey: @"root"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Mixin class]]) {
    return NO;
  }
  Mixin *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasRoot == otherMessage.hasRoot &&
      (!self.hasRoot || [self.root isEqual:otherMessage.root]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasRoot) {
    hashCode = hashCode * 31 + [self.root hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MixinBuilder()
@property (strong) Mixin* resultMixin;
@end

@implementation MixinBuilder
@synthesize resultMixin;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMixin = [[Mixin alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMixin;
}
- (MixinBuilder*) clear {
  self.resultMixin = [[Mixin alloc] init];
  return self;
}
- (MixinBuilder*) clone {
  return [Mixin builderWithPrototype:resultMixin];
}
- (Mixin*) defaultInstance {
  return [Mixin defaultInstance];
}
- (Mixin*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Mixin*) buildPartial {
  Mixin* returnMe = resultMixin;
  self.resultMixin = nil;
  return returnMe;
}
- (MixinBuilder*) mergeFrom:(Mixin*) other {
  if (other == [Mixin defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasRoot) {
    [self setRoot:other.root];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MixinBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MixinBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setRoot:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultMixin.hasName;
}
- (NSString*) name {
  return resultMixin.name;
}
- (MixinBuilder*) setName:(NSString*) value {
  resultMixin.hasName = YES;
  resultMixin.name = value;
  return self;
}
- (MixinBuilder*) clearName {
  resultMixin.hasName = NO;
  resultMixin.name = @"";
  return self;
}
- (BOOL) hasRoot {
  return resultMixin.hasRoot;
}
- (NSString*) root {
  return resultMixin.root;
}
- (MixinBuilder*) setRoot:(NSString*) value {
  resultMixin.hasRoot = YES;
  resultMixin.root = value;
  return self;
}
- (MixinBuilder*) clearRoot {
  resultMixin.hasRoot = NO;
  resultMixin.root = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
