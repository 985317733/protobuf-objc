// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Struct.pb.h"
// @@protoc_insertion_point(imports)

@implementation StructRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StructRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL NullValueIsValidValue(NullValue value) {
  switch (value) {
    case NullValueNullValue:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromNullValue(NullValue value) {
  switch (value) {
    case NullValueNullValue:
      return @"NullValueNullValue";
    default:
      return nil;
  }
}

@interface Struct ()
@property (strong) NSMutableArray<StructFieldsEntry*> * fieldsArray;
@end

@implementation Struct

@synthesize fieldsArray;
@dynamic fields;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static Struct* defaultStructInstance = nil;
+ (void) initialize {
  if (self == [Struct class]) {
    defaultStructInstance = [[Struct alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStructInstance;
}
- (instancetype) defaultInstance {
  return defaultStructInstance;
}
- (NSArray<StructFieldsEntry*> *)fields {
  return fieldsArray;
}
- (StructFieldsEntry*)fieldsAtIndex:(NSUInteger)index {
  return [fieldsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.fieldsArray enumerateObjectsUsingBlock:^(StructFieldsEntry *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.fieldsArray enumerateObjectsUsingBlock:^(StructFieldsEntry *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Struct*) parseFromData:(NSData*) data {
  return (Struct*)[[[Struct builder] mergeFromData:data] build];
}
+ (Struct*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Struct*)[[[Struct builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Struct*) parseFromInputStream:(NSInputStream*) input {
  return (Struct*)[[[Struct builder] mergeFromInputStream:input] build];
}
+ (Struct*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Struct*)[[[Struct builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Struct*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Struct*)[[[Struct builder] mergeFromCodedInputStream:input] build];
}
+ (Struct*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Struct*)[[[Struct builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StructBuilder*) builder {
  return [[StructBuilder alloc] init];
}
+ (StructBuilder*) builderWithPrototype:(Struct*) prototype {
  return [[Struct builder] mergeFrom:prototype];
}
- (StructBuilder*) builder {
  return [Struct builder];
}
- (StructBuilder*) toBuilder {
  return [Struct builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.fieldsArray enumerateObjectsUsingBlock:^(StructFieldsEntry *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"fields"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (StructFieldsEntry* element in self.fieldsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"fields"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Struct class]]) {
    return NO;
  }
  Struct *otherMessage = other;
  return
      [self.fieldsArray isEqualToArray:otherMessage.fieldsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.fieldsArray enumerateObjectsUsingBlock:^(StructFieldsEntry *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StructFieldsEntry ()
@property (strong) NSString* key;
@property (strong) Value* value;
@end

@implementation StructFieldsEntry

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = [Value defaultInstance];
  }
  return self;
}
static StructFieldsEntry* defaultStructFieldsEntryInstance = nil;
+ (void) initialize {
  if (self == [StructFieldsEntry class]) {
    defaultStructFieldsEntryInstance = [[StructFieldsEntry alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStructFieldsEntryInstance;
}
- (instancetype) defaultInstance {
  return defaultStructFieldsEntryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeMessage:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeMessageSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StructFieldsEntry*) parseFromData:(NSData*) data {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromData:data] build];
}
+ (StructFieldsEntry*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StructFieldsEntry*) parseFromInputStream:(NSInputStream*) input {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromInputStream:input] build];
}
+ (StructFieldsEntry*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StructFieldsEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromCodedInputStream:input] build];
}
+ (StructFieldsEntry*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StructFieldsEntry*)[[[StructFieldsEntry builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StructFieldsEntryBuilder*) builder {
  return [[StructFieldsEntryBuilder alloc] init];
}
+ (StructFieldsEntryBuilder*) builderWithPrototype:(StructFieldsEntry*) prototype {
  return [[StructFieldsEntry builder] mergeFrom:prototype];
}
- (StructFieldsEntryBuilder*) builder {
  return [StructFieldsEntry builder];
}
- (StructFieldsEntryBuilder*) toBuilder {
  return [StructFieldsEntry builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@ {\n", indent, @"value"];
    [self.value writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.value storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StructFieldsEntry class]]) {
    return NO;
  }
  StructFieldsEntry *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StructFieldsEntryBuilder()
@property (strong) StructFieldsEntry* resultFieldsEntry;
@end

@implementation StructFieldsEntryBuilder
@synthesize resultFieldsEntry;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFieldsEntry = [[StructFieldsEntry alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFieldsEntry;
}
- (StructFieldsEntryBuilder*) clear {
  self.resultFieldsEntry = [[StructFieldsEntry alloc] init];
  return self;
}
- (StructFieldsEntryBuilder*) clone {
  return [StructFieldsEntry builderWithPrototype:resultFieldsEntry];
}
- (StructFieldsEntry*) defaultInstance {
  return [StructFieldsEntry defaultInstance];
}
- (StructFieldsEntry*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StructFieldsEntry*) buildPartial {
  StructFieldsEntry* returnMe = resultFieldsEntry;
  self.resultFieldsEntry = nil;
  return returnMe;
}
- (StructFieldsEntryBuilder*) mergeFrom:(StructFieldsEntry*) other {
  if (other == [StructFieldsEntry defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self mergeValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StructFieldsEntryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StructFieldsEntryBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        ValueBuilder* subBuilder = [Value builder];
        if (self.hasValue) {
          [subBuilder mergeFrom:self.value];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setValue:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultFieldsEntry.hasKey;
}
- (NSString*) key {
  return resultFieldsEntry.key;
}
- (StructFieldsEntryBuilder*) setKey:(NSString*) value {
  resultFieldsEntry.hasKey = YES;
  resultFieldsEntry.key = value;
  return self;
}
- (StructFieldsEntryBuilder*) clearKey {
  resultFieldsEntry.hasKey = NO;
  resultFieldsEntry.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultFieldsEntry.hasValue;
}
- (Value*) value {
  return resultFieldsEntry.value;
}
- (StructFieldsEntryBuilder*) setValue:(Value*) value {
  resultFieldsEntry.hasValue = YES;
  resultFieldsEntry.value = value;
  return self;
}
- (StructFieldsEntryBuilder*) setValueBuilder:(ValueBuilder*) builderForValue {
  return [self setValue:[builderForValue build]];
}
- (StructFieldsEntryBuilder*) mergeValue:(Value*) value {
  if (resultFieldsEntry.hasValue &&
      resultFieldsEntry.value != [Value defaultInstance]) {
    resultFieldsEntry.value =
      [[[Value builderWithPrototype:resultFieldsEntry.value] mergeFrom:value] buildPartial];
  } else {
    resultFieldsEntry.value = value;
  }
  resultFieldsEntry.hasValue = YES;
  return self;
}
- (StructFieldsEntryBuilder*) clearValue {
  resultFieldsEntry.hasValue = NO;
  resultFieldsEntry.value = [Value defaultInstance];
  return self;
}
@end

@interface StructBuilder()
@property (strong) Struct* resultStruct;
@end

@implementation StructBuilder
@synthesize resultStruct;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStruct = [[Struct alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStruct;
}
- (StructBuilder*) clear {
  self.resultStruct = [[Struct alloc] init];
  return self;
}
- (StructBuilder*) clone {
  return [Struct builderWithPrototype:resultStruct];
}
- (Struct*) defaultInstance {
  return [Struct defaultInstance];
}
- (Struct*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Struct*) buildPartial {
  Struct* returnMe = resultStruct;
  self.resultStruct = nil;
  return returnMe;
}
- (StructBuilder*) mergeFrom:(Struct*) other {
  if (other == [Struct defaultInstance]) {
    return self;
  }
  if (other.fieldsArray.count > 0) {
    if (resultStruct.fieldsArray == nil) {
      resultStruct.fieldsArray = [[NSMutableArray alloc] initWithArray:other.fieldsArray];
    } else {
      [resultStruct.fieldsArray addObjectsFromArray:other.fieldsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StructBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StructBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        StructFieldsEntryBuilder* subBuilder = [StructFieldsEntry builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFields:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<StructFieldsEntry*> *)fields {
  return resultStruct.fieldsArray;
}
- (StructFieldsEntry*)fieldsAtIndex:(NSUInteger)index {
  return [resultStruct fieldsAtIndex:index];
}
- (StructBuilder *)addFields:(StructFieldsEntry*)value {
  if (resultStruct.fieldsArray == nil) {
    resultStruct.fieldsArray = [[NSMutableArray alloc]init];
  }
  [resultStruct.fieldsArray addObject:value];
  return self;
}
- (StructBuilder *)setFieldsArray:(NSArray<StructFieldsEntry*> *)array {
  resultStruct.fieldsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (StructBuilder *)clearFields {
  resultStruct.fieldsArray = nil;
  return self;
}
@end

@interface Value ()
@property NullValue nullValue;
@property Float64 numberValue;
@property (strong) NSString* stringValue;
@property BOOL boolValue;
@property (strong) Struct* structValue;
@property (strong) ListValue* listValue;
@end

@implementation Value

- (BOOL) hasNullValue {
  return !!hasNullValue_;
}
- (void) setHasNullValue:(BOOL) _value_ {
  hasNullValue_ = !!_value_;
}
@synthesize nullValue;
- (BOOL) hasNumberValue {
  return !!hasNumberValue_;
}
- (void) setHasNumberValue:(BOOL) _value_ {
  hasNumberValue_ = !!_value_;
}
@synthesize numberValue;
- (BOOL) hasStringValue {
  return !!hasStringValue_;
}
- (void) setHasStringValue:(BOOL) _value_ {
  hasStringValue_ = !!_value_;
}
@synthesize stringValue;
- (BOOL) hasBoolValue {
  return !!hasBoolValue_;
}
- (void) setHasBoolValue:(BOOL) _value_ {
  hasBoolValue_ = !!_value_;
}
- (BOOL) boolValue {
  return !!boolValue_;
}
- (void) setBoolValue:(BOOL) _value_ {
  boolValue_ = !!_value_;
}
- (BOOL) hasStructValue {
  return !!hasStructValue_;
}
- (void) setHasStructValue:(BOOL) _value_ {
  hasStructValue_ = !!_value_;
}
@synthesize structValue;
- (BOOL) hasListValue {
  return !!hasListValue_;
}
- (void) setHasListValue:(BOOL) _value_ {
  hasListValue_ = !!_value_;
}
@synthesize listValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.nullValue = NullValueNullValue;
    self.numberValue = 0;
    self.stringValue = @"";
    self.boolValue = NO;
    self.structValue = [Struct defaultInstance];
    self.listValue = [ListValue defaultInstance];
  }
  return self;
}
static Value* defaultValueInstance = nil;
+ (void) initialize {
  if (self == [Value class]) {
    defaultValueInstance = [[Value alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultValueInstance;
}
- (instancetype) defaultInstance {
  return defaultValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNullValue) {
    [output writeEnum:1 value:self.nullValue];
  }
  if (self.hasNumberValue) {
    [output writeDouble:2 value:self.numberValue];
  }
  if (self.hasStringValue) {
    [output writeString:3 value:self.stringValue];
  }
  if (self.hasBoolValue) {
    [output writeBool:4 value:self.boolValue];
  }
  if (self.hasStructValue) {
    [output writeMessage:5 value:self.structValue];
  }
  if (self.hasListValue) {
    [output writeMessage:6 value:self.listValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNullValue) {
    size_ += computeEnumSize(1, self.nullValue);
  }
  if (self.hasNumberValue) {
    size_ += computeDoubleSize(2, self.numberValue);
  }
  if (self.hasStringValue) {
    size_ += computeStringSize(3, self.stringValue);
  }
  if (self.hasBoolValue) {
    size_ += computeBoolSize(4, self.boolValue);
  }
  if (self.hasStructValue) {
    size_ += computeMessageSize(5, self.structValue);
  }
  if (self.hasListValue) {
    size_ += computeMessageSize(6, self.listValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Value*) parseFromData:(NSData*) data {
  return (Value*)[[[Value builder] mergeFromData:data] build];
}
+ (Value*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Value*)[[[Value builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Value*) parseFromInputStream:(NSInputStream*) input {
  return (Value*)[[[Value builder] mergeFromInputStream:input] build];
}
+ (Value*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Value*)[[[Value builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Value*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Value*)[[[Value builder] mergeFromCodedInputStream:input] build];
}
+ (Value*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Value*)[[[Value builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ValueBuilder*) builder {
  return [[ValueBuilder alloc] init];
}
+ (ValueBuilder*) builderWithPrototype:(Value*) prototype {
  return [[Value builder] mergeFrom:prototype];
}
- (ValueBuilder*) builder {
  return [Value builder];
}
- (ValueBuilder*) toBuilder {
  return [Value builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNullValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nullValue", NSStringFromNullValue(self.nullValue)];
  }
  if (self.hasNumberValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numberValue", [NSNumber numberWithDouble:self.numberValue]];
  }
  if (self.hasStringValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stringValue", self.stringValue];
  }
  if (self.hasBoolValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boolValue", [NSNumber numberWithBool:self.boolValue]];
  }
  if (self.hasStructValue) {
    [output appendFormat:@"%@%@ {\n", indent, @"structValue"];
    [self.structValue writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasListValue) {
    [output appendFormat:@"%@%@ {\n", indent, @"listValue"];
    [self.listValue writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNullValue) {
    [dictionary setObject: @(self.nullValue) forKey: @"nullValue"];
  }
  if (self.hasNumberValue) {
    [dictionary setObject: [NSNumber numberWithDouble:self.numberValue] forKey: @"numberValue"];
  }
  if (self.hasStringValue) {
    [dictionary setObject: self.stringValue forKey: @"stringValue"];
  }
  if (self.hasBoolValue) {
    [dictionary setObject: [NSNumber numberWithBool:self.boolValue] forKey: @"boolValue"];
  }
  if (self.hasStructValue) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.structValue storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"structValue"];
  }
  if (self.hasListValue) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.listValue storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"listValue"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Value class]]) {
    return NO;
  }
  Value *otherMessage = other;
  return
      self.hasNullValue == otherMessage.hasNullValue &&
      (!self.hasNullValue || self.nullValue == otherMessage.nullValue) &&
      self.hasNumberValue == otherMessage.hasNumberValue &&
      (!self.hasNumberValue || self.numberValue == otherMessage.numberValue) &&
      self.hasStringValue == otherMessage.hasStringValue &&
      (!self.hasStringValue || [self.stringValue isEqual:otherMessage.stringValue]) &&
      self.hasBoolValue == otherMessage.hasBoolValue &&
      (!self.hasBoolValue || self.boolValue == otherMessage.boolValue) &&
      self.hasStructValue == otherMessage.hasStructValue &&
      (!self.hasStructValue || [self.structValue isEqual:otherMessage.structValue]) &&
      self.hasListValue == otherMessage.hasListValue &&
      (!self.hasListValue || [self.listValue isEqual:otherMessage.listValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNullValue) {
    hashCode = hashCode * 31 + self.nullValue;
  }
  if (self.hasNumberValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.numberValue] hash];
  }
  if (self.hasStringValue) {
    hashCode = hashCode * 31 + [self.stringValue hash];
  }
  if (self.hasBoolValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.boolValue] hash];
  }
  if (self.hasStructValue) {
    hashCode = hashCode * 31 + [self.structValue hash];
  }
  if (self.hasListValue) {
    hashCode = hashCode * 31 + [self.listValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ValueBuilder()
@property (strong) Value* resultValue;
@end

@implementation ValueBuilder
@synthesize resultValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultValue = [[Value alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultValue;
}
- (ValueBuilder*) clear {
  self.resultValue = [[Value alloc] init];
  return self;
}
- (ValueBuilder*) clone {
  return [Value builderWithPrototype:resultValue];
}
- (Value*) defaultInstance {
  return [Value defaultInstance];
}
- (Value*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Value*) buildPartial {
  Value* returnMe = resultValue;
  self.resultValue = nil;
  return returnMe;
}
- (ValueBuilder*) mergeFrom:(Value*) other {
  if (other == [Value defaultInstance]) {
    return self;
  }
  if (other.hasNullValue) {
    [self setNullValue:other.nullValue];
  }
  if (other.hasNumberValue) {
    [self setNumberValue:other.numberValue];
  }
  if (other.hasStringValue) {
    [self setStringValue:other.stringValue];
  }
  if (other.hasBoolValue) {
    [self setBoolValue:other.boolValue];
  }
  if (other.hasStructValue) {
    [self mergeStructValue:other.structValue];
  }
  if (other.hasListValue) {
    [self mergeListValue:other.listValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        NullValue value = (NullValue)[input readEnum];
        if (NullValueIsValidValue(value)) {
          [self setNullValue:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 17: {
        [self setNumberValue:[input readDouble]];
        break;
      }
      case 26: {
        [self setStringValue:[input readString]];
        break;
      }
      case 32: {
        [self setBoolValue:[input readBool]];
        break;
      }
      case 42: {
        StructBuilder* subBuilder = [Struct builder];
        if (self.hasStructValue) {
          [subBuilder mergeFrom:self.structValue];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStructValue:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        ListValueBuilder* subBuilder = [ListValue builder];
        if (self.hasListValue) {
          [subBuilder mergeFrom:self.listValue];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setListValue:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNullValue {
  return resultValue.hasNullValue;
}
- (NullValue) nullValue {
  return resultValue.nullValue;
}
- (ValueBuilder*) setNullValue:(NullValue) value {
  resultValue.hasNullValue = YES;
  resultValue.nullValue = value;
  return self;
}
- (ValueBuilder*) clearNullValue {
  resultValue.hasNullValue = NO;
  resultValue.nullValue = NullValueNullValue;
  return self;
}
- (BOOL) hasNumberValue {
  return resultValue.hasNumberValue;
}
- (Float64) numberValue {
  return resultValue.numberValue;
}
- (ValueBuilder*) setNumberValue:(Float64) value {
  resultValue.hasNumberValue = YES;
  resultValue.numberValue = value;
  return self;
}
- (ValueBuilder*) clearNumberValue {
  resultValue.hasNumberValue = NO;
  resultValue.numberValue = 0;
  return self;
}
- (BOOL) hasStringValue {
  return resultValue.hasStringValue;
}
- (NSString*) stringValue {
  return resultValue.stringValue;
}
- (ValueBuilder*) setStringValue:(NSString*) value {
  resultValue.hasStringValue = YES;
  resultValue.stringValue = value;
  return self;
}
- (ValueBuilder*) clearStringValue {
  resultValue.hasStringValue = NO;
  resultValue.stringValue = @"";
  return self;
}
- (BOOL) hasBoolValue {
  return resultValue.hasBoolValue;
}
- (BOOL) boolValue {
  return resultValue.boolValue;
}
- (ValueBuilder*) setBoolValue:(BOOL) value {
  resultValue.hasBoolValue = YES;
  resultValue.boolValue = value;
  return self;
}
- (ValueBuilder*) clearBoolValue {
  resultValue.hasBoolValue = NO;
  resultValue.boolValue = NO;
  return self;
}
- (BOOL) hasStructValue {
  return resultValue.hasStructValue;
}
- (Struct*) structValue {
  return resultValue.structValue;
}
- (ValueBuilder*) setStructValue:(Struct*) value {
  resultValue.hasStructValue = YES;
  resultValue.structValue = value;
  return self;
}
- (ValueBuilder*) setStructValueBuilder:(StructBuilder*) builderForValue {
  return [self setStructValue:[builderForValue build]];
}
- (ValueBuilder*) mergeStructValue:(Struct*) value {
  if (resultValue.hasStructValue &&
      resultValue.structValue != [Struct defaultInstance]) {
    resultValue.structValue =
      [[[Struct builderWithPrototype:resultValue.structValue] mergeFrom:value] buildPartial];
  } else {
    resultValue.structValue = value;
  }
  resultValue.hasStructValue = YES;
  return self;
}
- (ValueBuilder*) clearStructValue {
  resultValue.hasStructValue = NO;
  resultValue.structValue = [Struct defaultInstance];
  return self;
}
- (BOOL) hasListValue {
  return resultValue.hasListValue;
}
- (ListValue*) listValue {
  return resultValue.listValue;
}
- (ValueBuilder*) setListValue:(ListValue*) value {
  resultValue.hasListValue = YES;
  resultValue.listValue = value;
  return self;
}
- (ValueBuilder*) setListValueBuilder:(ListValueBuilder*) builderForValue {
  return [self setListValue:[builderForValue build]];
}
- (ValueBuilder*) mergeListValue:(ListValue*) value {
  if (resultValue.hasListValue &&
      resultValue.listValue != [ListValue defaultInstance]) {
    resultValue.listValue =
      [[[ListValue builderWithPrototype:resultValue.listValue] mergeFrom:value] buildPartial];
  } else {
    resultValue.listValue = value;
  }
  resultValue.hasListValue = YES;
  return self;
}
- (ValueBuilder*) clearListValue {
  resultValue.hasListValue = NO;
  resultValue.listValue = [ListValue defaultInstance];
  return self;
}
@end

@interface ListValue ()
@property (strong) NSMutableArray<Value*> * valuesArray;
@end

@implementation ListValue

@synthesize valuesArray;
@dynamic values;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ListValue* defaultListValueInstance = nil;
+ (void) initialize {
  if (self == [ListValue class]) {
    defaultListValueInstance = [[ListValue alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultListValueInstance;
}
- (instancetype) defaultInstance {
  return defaultListValueInstance;
}
- (NSArray<Value*> *)values {
  return valuesArray;
}
- (Value*)valuesAtIndex:(NSUInteger)index {
  return [valuesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.valuesArray enumerateObjectsUsingBlock:^(Value *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.valuesArray enumerateObjectsUsingBlock:^(Value *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ListValue*) parseFromData:(NSData*) data {
  return (ListValue*)[[[ListValue builder] mergeFromData:data] build];
}
+ (ListValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListValue*)[[[ListValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ListValue*) parseFromInputStream:(NSInputStream*) input {
  return (ListValue*)[[[ListValue builder] mergeFromInputStream:input] build];
}
+ (ListValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListValue*)[[[ListValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ListValue*)[[[ListValue builder] mergeFromCodedInputStream:input] build];
}
+ (ListValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ListValue*)[[[ListValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ListValueBuilder*) builder {
  return [[ListValueBuilder alloc] init];
}
+ (ListValueBuilder*) builderWithPrototype:(ListValue*) prototype {
  return [[ListValue builder] mergeFrom:prototype];
}
- (ListValueBuilder*) builder {
  return [ListValue builder];
}
- (ListValueBuilder*) toBuilder {
  return [ListValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.valuesArray enumerateObjectsUsingBlock:^(Value *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"values"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (Value* element in self.valuesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"values"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ListValue class]]) {
    return NO;
  }
  ListValue *otherMessage = other;
  return
      [self.valuesArray isEqualToArray:otherMessage.valuesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.valuesArray enumerateObjectsUsingBlock:^(Value *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ListValueBuilder()
@property (strong) ListValue* resultListValue;
@end

@implementation ListValueBuilder
@synthesize resultListValue;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultListValue = [[ListValue alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultListValue;
}
- (ListValueBuilder*) clear {
  self.resultListValue = [[ListValue alloc] init];
  return self;
}
- (ListValueBuilder*) clone {
  return [ListValue builderWithPrototype:resultListValue];
}
- (ListValue*) defaultInstance {
  return [ListValue defaultInstance];
}
- (ListValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ListValue*) buildPartial {
  ListValue* returnMe = resultListValue;
  self.resultListValue = nil;
  return returnMe;
}
- (ListValueBuilder*) mergeFrom:(ListValue*) other {
  if (other == [ListValue defaultInstance]) {
    return self;
  }
  if (other.valuesArray.count > 0) {
    if (resultListValue.valuesArray == nil) {
      resultListValue.valuesArray = [[NSMutableArray alloc] initWithArray:other.valuesArray];
    } else {
      [resultListValue.valuesArray addObjectsFromArray:other.valuesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ListValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ListValueBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ValueBuilder* subBuilder = [Value builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addValues:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<Value*> *)values {
  return resultListValue.valuesArray;
}
- (Value*)valuesAtIndex:(NSUInteger)index {
  return [resultListValue valuesAtIndex:index];
}
- (ListValueBuilder *)addValues:(Value*)value {
  if (resultListValue.valuesArray == nil) {
    resultListValue.valuesArray = [[NSMutableArray alloc]init];
  }
  [resultListValue.valuesArray addObject:value];
  return self;
}
- (ListValueBuilder *)setValuesArray:(NSArray<Value*> *)array {
  resultListValue.valuesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ListValueBuilder *)clearValues {
  resultListValue.valuesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
